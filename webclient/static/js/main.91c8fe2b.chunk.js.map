{"version":3,"sources":["MainForm.js","App.js","reportWebVitals.js","index.js"],"names":["MainForm","props","schema","type","properties","charger","title","enum","payload","oneOf","customData","vendorId","maxLength","reservationId","description","required","certificateChain","certificateType","onSubmit","e","formData","target","options","selectedIndex","window","alert","JSON","stringify","state","chargers","isLoaded","error","axios","get","then","res","setState","data","this","Alert","variant","message","Component","App","size","useState","width","height","windowSize","setWindowSize","useEffect","handleResize","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","className","style","Container","fluid","Navbar","bg","expand","Brand","href","color","Row","Col","lg","overflowY","enableSearch","url","websocket","websocketOptions","onOpen","sock","send","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.91c8fe2b.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Form from '@rjsf/bootstrap-4';\nimport axios from 'axios';\nimport {Alert} from \"react-bootstrap\";\n\nclass MainForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            chargers: [],\n            isLoaded: false,\n            error: null,\n        };\n    }\n\n    schema = {\n        type: \"object\",\n        properties: {\n            charger: {\n                title: \"Select charger\",\n                type: \"string\",\n                enum: []\n            },\n            payload: {\n                title: \"Select request\",\n                type: \"object\",\n                oneOf: [\n                    {\n                        title: \"Cancel reservation\",\n                        properties: {\n                            customData: {\n                                type: \"object\",\n                                properties: {\n                                    vendorId: {\n                                        type: \"string\",\n                                        maxLength: 255\n                                    }\n                                }\n                            },\n                            reservationId: {\n                                type: \"number\",\n                                description: \"Id of the reservation to cancel\"\n                            },\n                        },\n                        required: [\"reservationId\"]\n                    },\n                    {\n                        title: \"Certificate Signed Request\",\n                        properties: {\n                            customData: {\n                                type: \"object\",\n                                properties: {\n                                    vendorId: {\n                                        type: \"string\",\n                                        maxLength: 255\n                                    }\n                                }\n                            },\n                            certificateChain: {\n                                description: \"The signed PEM encoded X.509 certificate. This can also contain the \" +\n                                    \"necessary sub CA certificates. In that case, the order of the bundle should follow \" +\n                                    \"the certificate chain, starting from the leaf certificate.\\r\\n\\r\\nThe Configuration \" +\n                                    \"Variable &lt;&lt;configkey-max-certificate-chain-size,MaxCertificateChainSize&gt;&gt; \" +\n                                    \"can be used to limit the maximum size of this field.\\r\\n\",\n                                type: \"string\",\n                                maxLength: 10000\n                            },\n                            certificateType: {\n                                type: \"string\",\n                                enum: [\"ChargingStationCertificate\", \"V2GCertificate\"]\n                            }\n                        },\n                        required: [\"certificateChain\"]\n                    }\n                ]\n            }\n        }\n    }\n\n    componentDidMount() {\n        axios.get('/api/get-chargers').then(res => {\n                this.setState({\n                    isLoaded: true,\n                    chargers: res.data\n                });\n            },\n            (error) => {\n                this.setState({\n                    isLoaded: true,\n                    error\n                });\n            })\n    }\n\n    onSubmit = ({formData}, e) => {\n        switch(e.target[1].options.selectedIndex) {\n            case 0:\n                formData[\"selected\"] = \"CancelReservation\";\n                break;\n            case 1:\n                formData[\"selected\"] = \"CertificateSigned\";\n                break;\n            default:\n                break;\n        }\n        window.alert(JSON.stringify(formData))\n    }\n\n\n    render() {\n        const { chargers, isLoaded, error } = this.state;\n        if (error) {\n            return <Alert variant=\"danger\">{error.message}</Alert>;\n        } else if (!isLoaded) {\n            return <Alert variant=\"info\">Loading...</Alert>;\n        } else {\n            this.schema.properties.charger.enum = chargers;\n            return (\n                <Form schema={this.schema} onSubmit={this.onSubmit} />\n            );\n        }\n\n    }\n}\n\n\nexport default MainForm;","import 'bootstrap/dist/css/bootstrap.min.css'\nimport React from \"react\";\nimport {Col, Container, Navbar, Row} from \"react-bootstrap\";\nimport MainForm from \"./MainForm\";\nimport { useState, useEffect } from \"react\";\nimport { LazyLog } from 'react-lazylog';\n\nfunction App() {\n  const size = useWindowSize();\n\n  return (\n      <div className=\"App bg-dark\" style={{height: size.height}}>\n        <Container fluid>\n          <Navbar bg=\"dark\" expand=\"lg\" className='navbar-dark'>\n            <Navbar.Brand href=\"#\" style={{color: \"orange\"}}>Ocpp Server web client</Navbar.Brand>\n          </Navbar>\n        </Container>\n        <Container fluid>\n          <Row>\n            <Col lg='5' className={\"text-light bg-dark\"} style={{overflowY: \"auto\", height: size.height - 56}}>\n              <MainForm/>\n            </Col>\n            <Col>\n              <LazyLog height={size.height - 56} enableSearch url=\"/webclient-socket\"\n                       websocket={true} websocketOptions={{\n                onOpen: (e, sock) => {\n                  sock.send(JSON.stringify({message: \"Socket has been opened!\"}))\n                },\n                //formatMessage: e => JSON.parse(e).message,\n              }} />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n  );\n}\n\n// Hook\nfunction useWindowSize() {\n  const [windowSize, setWindowSize] = useState({\n    width: 1024,\n    height: 768,\n  });\n\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({width: window.innerWidth, height: window.innerHeight});\n    }\n\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}