{"version":3,"sources":["config.js","components/Forms/_common.js","components/Forms/cancelReservation.js","components/Forms/certificateSigned.js","components/Forms/changeAvailability.js","components/Forms/clearCache.js","components/Forms/clearChargingProfile.js","components/Forms/clearDisplayMessage.js","components/Forms/clearVariableMonioring.js","components/Forms/costUpdated.js","components/Forms/customerInformation.js","components/Forms/dataTransfer.js","components/Forms/deleteCertificate.js","components/Forms/getBaseReport.js","components/Forms/getChargingProfiles.js","components/Forms/getCompositeSchedule.js","components/Forms/getDisplayMessages.js","components/Forms/getInstalledCertificateIds.js","components/Forms/getLocalListVersion.js","components/Forms/getLog.js","components/Forms/getMonitoringReport.js","components/Forms/getReport.js","components/Forms/getTransactionStatus.js","components/Forms/getVariables.js","components/Forms/installCertificate.js","components/Forms/publishFirmware.js","components/Forms/reserveNow.js","components/Forms/reset.js","components/Forms/sendLocalList.js","components/Forms/setChargingProfile.js","components/Forms/setDisplayMessage.js","components/Forms/setMonitoringBase.js","components/Forms/setMonitoringLevel.js","components/Forms/setNetworkProfile.js","components/Forms/setVariableMonitoring.js","components/Forms/setVariables.js","components/Forms/signCertificate.js","components/Forms/triggerMessage.js","components/Forms/unlockConnector.js","components/Forms/unpublishFirmware.js","components/Forms/updateFirmware.js","components/MainForm.js","App.js","reportWebVitals.js","index.js"],"names":["IP_AND_PORT","_common","schema","requestName","formatData","formData","newFormData","clientId","props","uid","charger","selected","payload","JSON","stringify","ObjectFieldTemplate","Card","border","Header","className","title","Body","Text","description","properties","map","value","index","content","ArrayFieldTemplate","ListGroup","variant","items","Item","ButtonToolbar","children","ButtonGroup","size","hasRemove","Button","type","onClick","onDropIndexClick","disabled","hasMoveUp","onReorderClick","hasMoveDown","canAdd","onAddClick","formatCustomData","parent","newParent","hasOwnProperty","customData","json","parse","jsonString","vendorId","validate","errors","length","addError","e","onSubmit","a","window","alert","axios","post","headers","style","backgroundColor","Accordion","Toggle","as","eventKey","this","AccordionCollapse","React","Component","CancelReservation","definitions","CustomDataType","default","maxLength","$ref","reservationId","required","CertificateSigned","CertificateSigningUseEnumType","enum","certificateChain","certificateType","ChangeAvailability","OperationalStatusEnumType","additionalProperties","EVSEType","id","connectorId","evse","operationalStatus","ClearCache","ClearChargingProfile","ChargingProfilePurposeEnumType","ClearChargingProfileType","evseId","chargingProfilePurpose","stackLevel","chargingProfileId","chargingProfileCriteria","ClearDisplayMessage","ClearVariableMonitoring","minItems","CostUpdated","totalCost","transactionId","CustomerInformation","HashAlgorithmEnumType","IdTokenEnumType","AdditionalInfoType","additionalIdToken","CertificateHashDataType","hashAlgorithm","issuerNameHash","issuerKeyHash","serialNumber","IdTokenType","additionalInfo","idToken","customerCertificate","requestId","report","clear","customerIdentifier","forEach","DataTransfer","messageId","data","DeleteCertificate","certificateHashData","GetBaseReport","ReportBaseEnumType","reportBase","GetChargingProfiles","ChargingLimitSourceEnumType","ChargingProfileCriterionType","chargingLimitSource","maxItems","chargingProfile","GetCompositeSchedule","ChargingRateUnitEnumType","duration","chargingRateUnit","GetDisplayMessages","MessagePriorityEnumType","MessageStateEnumType","priority","state","GetInstalledCertificateIds","GetCertificateIdUseEnumType","GetLocalListVersion","GetLog","LogEnumType","LogParametersType","remoteLocation","oldestTimestamp","format","latestTimestamp","log","logType","retries","retryInterval","GetMonitoringReport","MonitoringCriterionEnumType","ComponentType","name","instance","ComponentVariableType","component","variable","VariableType","componentVariable","monitoringCriteria","GetReport","ComponentCriterionEnumType","componentCriteria","GetTransactionStatus","GetVariables","AttributeEnumType","GetVariableDataType","attributeType","getVariableData","console","InstallCertificate","InstallCertificateUseEnumType","certificate","PublishFirmware","location","checksum","ReserveNow","ConnectorEnumType","expiryDateTime","connectorType","groupIdToken","Reset","ResetEnumType","SendLocalList","AuthorizationStatusEnumType","MessageFormatEnumType","UpdateEnumType","AuthorizationData","idTokenInfo","IdTokenInfoType","status","cacheExpiryDateTime","chargingPriority","minimum","maximum","language1","language2","personalMessage","MessageContentType","language","localAuthorizationList","versionNumber","updateType","val_i","i","val_j","j","value_i","index_i","value_j","index_j","SetChargingProfile","ChargingProfileKindEnumType","CostKindEnumType","RecurrencyKindEnumType","ChargingProfileType","chargingProfileKind","recurrencyKind","validFrom","validTo","chargingSchedule","ChargingSchedulePeriodType","startPeriod","limit","numberPhases","phaseToUse","ChargingScheduleType","startSchedule","chargingSchedulePeriod","minChargingRate","salesTariff","ConsumptionCostType","startValue","cost","CostType","costKind","amount","amountMultiplier","RelativeTimeIntervalType","start","SalesTariffEntryType","relativeTimeInterval","ePriceLevel","consumptionCost","SalesTariffType","salesTariffDescription","numEPriceLevels","salesTariffEntry","value_a","index_a","value_b","index_b","value_c","index_c","value_d","index_d","SetDisplayMessage","MessageInfoType","display","startDateTime","endDateTime","message","SetMonitoringBase","MonitoringBaseEnumType","monitoringBase","SetMonitoringLevel","severity","SetNetworkProfile","APNAuthenticationEnumType","OCPPInterfaceEnumType","OCPPTransportEnumType","OCPPVersionEnumType","VPNEnumType","APNType","apn","apnUserName","apnPassword","simPin","preferredNetwork","useOnlyPreferredNetwork","apnAuthentication","NetworkConnectionProfileType","ocppVersion","ocppTransport","ocppCsmsUrl","messageTimeout","securityProfile","ocppInterface","vpn","VPNType","server","user","group","password","key","configurationSlot","connectionData","SetVariableMonitoring","MonitorEnumType","SetMonitoringDataType","transaction","setMonitoringData","SetVariables","SetVariableDataType","attributeValue","javaType","setVariableData","SignCertificate","csr","Common","TriggerMessage","MessageTriggerEnumType","requestedMessage","UnlockConnector","UnpublishFirmware","UpdateFirmware","FirmwareType","retrieveDateTime","installDateTime","signingCertificate","signature","firmware","MainForm","chargers","isLoaded","error","handleChange","bind","get","then","res","setState","event","target","Alert","Form","Group","controlId","Label","color","Control","onChange","App","useCookies","cookies","setCookie","useState","width","height","windowSize","setWindowSize","useEffect","handleResize","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","socket","ocppWebClientId","uuidv4","path","Container","fluid","Navbar","bg","expand","Brand","href","Row","Col","lg","overflowY","enableSearch","url","websocket","websocketOptions","onOpen","sock","send","onClose","formatMessage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","CookiesProvider","document","getElementById"],"mappings":"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","file":"static/js/main.a0f90136.chunk.js","sourcesContent":["export const IP_AND_PORT = '192.168.0.100:8887'\n","import PropTypes from \"prop-types\";\nimport Form from \"@rjsf/bootstrap-4\";\nimport React from \"react\";\nimport {Accordion, AccordionCollapse, Button, ButtonGroup, ButtonToolbar, Card, ListGroup} from \"react-bootstrap\";\nimport axios from \"axios\";\nimport {IP_AND_PORT} from \"../../config\";\n\nclass _common extends React.Component {\n    schema = {};\n    requestName = \"\";\n\n    formatData = (formData) => {\n        let newFormData = {clientId: this.props.uid, charger: this.props.charger, selected: this.requestName,\n            payload: formData};\n        return JSON.stringify(newFormData);\n    };\n\n    ObjectFieldTemplate = (props) => {\n        return (\n            <Card border=\"dark\">\n                <Card.Header className=\"text-white bg-dark\">\n                    {props.title}\n                </Card.Header>\n                <Card.Body>\n                    <Card.Text className=\"text-muted small\">{props.description}</Card.Text>\n                    {props.properties.map((value, index) => <div className=\"property-wrapper\"\n                                                                 key={index}>{value.content}</div>)}\n                </Card.Body>\n            </Card>\n        );\n    }\n\n    ArrayFieldTemplate = (props) => {\n        return (\n            <Card border=\"dark\">\n                <Card.Header className=\"text-white bg-dark\">{props.title}</Card.Header>\n                <ListGroup variant=\"flush\">\n                    {props.items.map((value, index) =>\n                        <ListGroup.Item>\n                            <ButtonToolbar className=\"justify-content-between\">\n                                {value.children}\n                                <ButtonGroup size=\"sm\">\n                                    {value.hasRemove ?\n                                        <Button className=\"bg-dark text-white\" type=\"button\"\n                                                onClick={value.onDropIndexClick(index)}><b>-</b></Button> :\n                                        <Button className=\"bg-dark text-white\" type=\"button\" disabled><b>-</b></Button>\n                                    }\n                                    {value.hasMoveUp ?\n                                        <Button className=\"bg-dark text-white\" type=\"button\"\n                                                onClick={value.onReorderClick(index, index - 1)}><b>&uarr;</b></Button> :\n                                        <Button className=\"bg-dark text-white\" type=\"button\"\n                                                disabled><b>&uarr;</b></Button>\n                                    }\n                                    {value.hasMoveDown ?\n                                        <Button className=\"bg-dark text-white\" type=\"button\"\n                                                onClick={value.onReorderClick(index, index + 1)}><b>&darr;</b></Button> :\n                                        <Button className=\"bg-dark text-white\" type=\"button\"\n                                                disabled><b>&darr;</b></Button>\n                                    }\n                                </ButtonGroup>\n                            </ButtonToolbar>\n                        </ListGroup.Item>\n                    )\n                    }\n                    {props.canAdd ?\n                        <Button type=\"button\"\n                                className=\"list-group-item list-group-item-action bg-dark text-white text-center\"\n                                onClick={props.onAddClick}>+</Button> :\n                        <Button type=\"button\"\n                                className=\"list-group-item list-group-item-action  bg-dark text-white text-center\"\n                                disabled>+</Button>}\n                </ListGroup>\n            </Card>\n        );\n    }\n\n    formatCustomData = (parent) => {\n        let newParent = parent;\n        if (newParent.hasOwnProperty(\"customData\")) {\n            if (newParent.customData.hasOwnProperty(\"jsonString\")) {\n                const json = JSON.parse(newParent.customData.jsonString);\n                if (json.hasOwnProperty(\"vendorId\")) {\n                    if (json.vendorId !== \"\") {\n                        newParent.customData = json;\n                    } else {\n                        delete newParent[\"customData\"]\n                    }\n                }\n            }\n        }\n        return newParent;\n    }\n\n\n    validate = (formData, errors) => {\n        if (formData.hasOwnProperty(\"customData\")) {\n            if (formData.customData.hasOwnProperty(\"jsonString\")) {\n                if (formData.customData.jsonString.length > 0) {\n                    try {\n                        const json = JSON.parse(formData.customData.jsonString);\n                        if(!json.hasOwnProperty(\"vendorId\")){\n                            errors.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                        }\n                    } catch (e) {\n                        errors.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                    }\n                }\n            }\n        }\n        return errors;\n    }\n\n    onSubmit = async ({formData}) => {\n        formData = this.formatCustomData(formData);\n        const json = this.formatData(formData);\n        window.alert(json);\n        await axios.post(`http://${IP_AND_PORT}/api/post-request`,\n            json, {headers: {'Content-Type': 'application/json'}});\n    }\n\n    render() {\n        return (\n            <Card  style={{backgroundColor: \"#d3d3d3\"}}>\n                <Card.Header>\n                    <Accordion.Toggle as={Card.Header} eventKey={this.props.eventKey}>\n                        {this.props.title}\n                    </Accordion.Toggle>\n                </Card.Header>\n                <AccordionCollapse eventKey={this.props.eventKey}>\n                    <Card.Body>\n                        <Form schema={this.schema} onSubmit={this.onSubmit} validate={this.validate}\n                              ObjectFieldTemplate={this.ObjectFieldTemplate}\n                              ArrayFieldTemplate={this.ArrayFieldTemplate}\n\n                        />\n                    </Card.Body>\n                </AccordionCollapse>\n            </Card>\n        );\n    }\n}\n\n_common.propTypes = {\n    charger: PropTypes.string.isRequired,\n    eventKey: PropTypes.string.isRequired,\n    uid: PropTypes.string.isRequired\n};\n\nexport default _common;","import _common from \"./_common\";\n\nexport class CancelReservation extends _common {\n    requestName = \"CancelReservation\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            reservationId: {\n                type: \"number\",\n                description: \"Id of the reservation to cancel\"\n            }\n        },\n        required: [\"reservationId\"]\n    }\n\n}\n\nexport default CancelReservation;","import _common from \"./_common\";\nexport class CertificateSigned extends _common {\n    requestName = \"CertificateSigned\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n            CertificateSigningUseEnumType: {\n                description: \"Indicates the type of the signed certificate that is returned. When omitted the certificate is used for both the 15118 connection (if implemented) and the Charging Station to CSMS connection. This field is required when a typeOfCertificate was included in the &lt;&lt;signcertificaterequest,SignCertificateRequest&gt;&gt; that requested this certificate to be signed AND both the 15118 connection and the Charging Station connection are implemented.\",\n                type: \"string\",\n                enum: [\"ChargingStationCertificate\", \"V2GCertificate\"]\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            certificateChain: {\n                description: \"The signed PEM encoded X.509 certificate. This can also contain the necessary sub CA certificates. In that case, the order of the bundle should follow the certificate chain, starting from the leaf certificate.\\r\\n\\r\\nThe Configuration Variable &lt;&lt;configkey-max-certificate-chain-size,MaxCertificateChainSize&gt;&gt; can be used to limit the maximum size of this field.\",\n                type: \"string\",\n                maxLength: 10000\n            },\n            certificateType: {\n                $ref: \"#/definitions/CertificateSigningUseEnumType\"\n            }\n        },\n        required: [\"certificateChain\"]\n    }\n}\n\nexport default CertificateSigned;","import _common from \"./_common\";\nimport axios from \"axios\";\nimport {IP_AND_PORT} from \"../../config\";\nexport class ChangeAvailability extends _common {\n    requestName = \"ChangeAvailability\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n            OperationalStatusEnumType: {\n                description: \"This contains the type of availability change that the Charging Station should perform.\",\n                type: \"string\",\n                additionalProperties: false,\n                enum: [\"Inoperative\", \"Operative\"]\n            },\n            EVSEType: {\n                description: \"Electric Vehicle Supply Equipment\",\n                type: \"object\",\n                additionalProperties: false,\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    id: {\n                        description: \"EVSE Identifier. This contains a number > 0 designating an EVSE of the Charging Station.\",\n                        type: \"integer\"\n                    },\n                    connectorId: {\n                        description: \"An id to designate a specific connector (on an EVSE) by connector index number.\",\n                        type: \"integer\"\n                    }\n                },\n                required: [\"id\"]\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            evse: {\n                $ref: \"#/definitions/EVSEType\"\n            },\n            operationalStatus: {\n                \"$ref\": \"#/definitions/OperationalStatusEnumType\"\n            }\n        },\n        required: [\"operationalStatus\"]\n    }\n\n    validate = (formData, errors) => {\n        let json = null;\n        if(formData.customData.jsonString.length > 0){\n            try {\n                json = JSON.parse(formData.customData.jsonString);\n                if(!json.hasOwnProperty(\"vendorId\")){\n                    errors.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                }\n            } catch (e) {\n                errors.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                return errors;\n            }\n        }\n        if(formData.evse.customData.jsonString.length > 0){\n            try {\n                json = JSON.parse(formData.evse.customData.jsonString);\n                if(!json.hasOwnProperty(\"vendorId\")){\n                    errors.evse.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                }\n            } catch (e) {\n                errors.evse.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                return errors;\n            }\n        }\n        return errors;\n    }\n\n    onSubmit = async ({formData}) => {\n        formData = this.formatCustomData(formData);\n        formData.evse = this.formatCustomData(formData.evse);\n        const json = this.formatData(formData);\n        window.alert(json);\n        await axios.post(`http://${IP_AND_PORT}/api/post-request`,\n             json, {headers: {'Content-Type': 'application/json'}});\n    }\n\n}\n\nexport default ChangeAvailability;","import _common from \"./_common\";\n\nexport class ClearCache extends _common {\n    requestName = \"ClearCache\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n        },\n    }\n}\n\nexport default ClearCache;","import _common from \"./_common\";\nimport axios from \"axios\";\nimport {IP_AND_PORT} from \"../../config\";\n\nexport class ClearChargingProfile extends _common {\n    requestName = \"ClearChargingProfile\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n            ChargingProfilePurposeEnumType: {\n                description: \"Specifies to purpose of the charging profiles that will be cleared, if they meet the other criteria in the request.\",\n                type: \"string\",\n                enum: [\n                    \"ChargingStationExternalConstraints\",\n                    \"ChargingStationMaxProfile\",\n                    \"TxDefaultProfile\",\n                    \"TxProfile\"\n                ]\n            },\n            ClearChargingProfileType: {\n                description: \"ChargingProfile consists of a ChargingSchedule, describing the amount of power or current that can be delivered per time interval.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    evseId: {\n                        description: \"Specifies the id of the EVSE for which to clear charging profiles. An evseId of zero (0) specifies the charging profile for the overall Charging Station. Absence of this parameter means the clearing applies to all charging profiles that match the other criteria in the request.\",\n                        type: \"integer\"\n                    },\n                    chargingProfilePurpose: {\n                        $ref: \"#/definitions/ChargingProfilePurposeEnumType\"\n                    },\n                    stackLevel: {\n                        description: \"Specifies the stackLevel for which charging profiles will be cleared, if they meet the other criteria in the request.\",\n                        type: \"integer\"\n                    }\n                }\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            chargingProfileId: {\n                description: \"The Id of the charging profile to clear.\",\n                type: \"integer\"\n            },\n            chargingProfileCriteria: {\n                $ref: \"#/definitions/ClearChargingProfileType\"\n            }\n        }\n    }\n\n    validate = (formData, errors) => {\n        let json = null;\n        if(formData.customData.jsonString.length > 0){\n            try {\n                json = JSON.parse(formData.customData.jsonString);\n                if(!json.hasOwnProperty(\"vendorId\")){\n                    errors.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                }\n            } catch (e) {\n                errors.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                return errors;\n            }\n        }\n        if(formData.chargingProfileCriteria.customData.jsonString.length > 0){\n            try {\n                JSON.parse(formData.chargingProfileCriteria.customData.jsonString);\n            } catch (e) {\n                errors.chargingProfileCriteria.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                return errors;\n            }\n        }\n        return errors;\n    }\n\n    onSubmit = async ({formData}) => {\n        formData = this.formatCustomData(formData);\n        formData.chargingProfileCriteria = this.formatCustomData(formData.chargingProfileCriteria);\n        const json = this.formatData(formData);\n        window.alert(json);\n        await axios.post(`http://${IP_AND_PORT}/api/post-request`,\n             json, {headers: {'Content-Type': 'application/json'}});\n    }\n\n}\n\nexport default ClearChargingProfile;","import _common from \"./_common\";\n\nclass ClearDisplayMessage extends _common {\n    requestName = \"ClearDisplayMessage\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            id: {\n                description: \"Id of the message that SHALL be removed from the Charging Station.\",\n                type: \"integer\"\n            }\n        },\n        required: [\"id\"]\n    }\n}\n\nexport default ClearDisplayMessage;","import _common from \"./_common\";\n\nclass ClearVariableMonitoring extends _common {\n    requestName = \"ClearVariableMonitoring\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            \"id\": {\n                description: \"List of the monitors to be cleared, identified by there Id.\",\n                type: \"array\",\n                items: {\n                    type: \"integer\"\n                },\n                minItems: 1\n            }\n        },\n        required: [\"id\"]\n    }\n}\n\nexport default ClearVariableMonitoring;","import _common from \"./_common\";\n\nclass CostUpdated extends _common {\n    requestName = \"CostUpdated\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            totalCost: {\n                description: \"Current total cost, based on the information known by the CSMS, of the transaction including taxes. In the currency configured with the configuration Variable: [<<&configkey-currency, Currency>>]\",\n                type: \"number\"\n            },\n            transactionId: {\n                description: \"Transaction Id of the transaction the current cost are asked for.\",\n                type: \"string\",\n                maxLength: 36\n            }\n        },\n        required: [\"totalCost\", \"transactionId\"]\n    }\n}\n\nexport default CostUpdated;","import _common from \"./_common\";\nimport axios from \"axios\";\nimport {IP_AND_PORT} from \"../../config\";\n\nclass CustomerInformation extends _common {\n    requestName=\"CustomerInformation\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n            HashAlgorithmEnumType: {\n                description: \"Used algorithms for the hashes provided.\",\n                type: \"string\",\n                enum: [\"SHA256\", \"SHA384\", \"SHA512\"]\n            },\n            IdTokenEnumType: {\n                description: \"Enumeration of possible idToken types.\",\n                type: \"string\",\n                enum: [\"Central\", \"eMAID\", \"ISO14443\", \"ISO15693\", \"KeyCode\", \"Local\", \"MacAddress\", \"NoAuthorization\"]\n            },\n            AdditionalInfoType: {\n                description: \"Contains a case insensitive identifier to use for the authorization and the type of authorization to support multiple forms of identifiers.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    additionalIdToken: {\n                        description: \"This field specifies the additional IdToken.\",\n                        type: \"string\",\n                        maxLength: 36\n                    },\n                    type: {\n                        description: \"This defines the type of the additionalIdToken. This is a custom type, so the implementation needs to be agreed upon by all involved parties.\",\n                        type: \"string\",\n                        maxLength: 50\n                    }\n                },\n                required: [\"additionalIdToken\", \"type\"]\n            },\n            CertificateHashDataType: {\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    hashAlgorithm: {\n                        $ref: \"#/definitions/HashAlgorithmEnumType\"\n                    },\n                    issuerNameHash: {\n                        description: \"Hashed value of the Issuer DN (Distinguished Name).\",\n                        type: \"string\",\n                        maxLength: 128\n                    },\n                    issuerKeyHash: {\n                        description: \"Hashed value of the issuers public key\",\n                        type: \"string\",\n                        maxLength: 128\n                    },\n                    serialNumber: {\n                        description: \"The serial number of the certificate.\",\n                        type: \"string\",\n                        maxLength: 40\n                    }\n                },\n                required: [\"hashAlgorithm\", \"issuerNameHash\", \"issuerKeyHash\", \"serialNumber\"]\n            },\n            IdTokenType: {\n                description: \"Contains a case insensitive identifier to use for the authorization and the type of authorization to support multiple forms of identifiers.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    additionalInfo: {\n                        type: \"array\",\n                        items: {\n                            $ref: \"#/definitions/AdditionalInfoType\"\n                        },\n                        minItems: 1\n                    },\n                    idToken: {\n                        description: \"IdToken is case insensitive. Might hold the hidden id of an RFID tag, but can for example also contain a UUID.\",\n                        type: \"string\",\n                        maxLength: 36\n                    },\n                    type: {\n                        $ref: \"#/definitions/IdTokenEnumType\"\n                    }\n                },\n                required: [ \"idToken\", \"type\" ]\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            customerCertificate: {\n                $ref: \"#/definitions/CertificateHashDataType\"\n            },\n            idToken: {\n                $ref: \"#/definitions/IdTokenType\"\n            },\n            requestId: {\n                description: \"The Id of the request.\",\n                type: \"integer\"\n            },\n            report: {\n                description: \"Flag indicating whether the Charging Station should return NotifyCustomerInformationRequest messages containing information about the customer referred to.\",\n                type: \"boolean\"\n            },\n            clear: {\n                description: \"Flag indicating whether the Charging Station should clear all information about the customer referred to.\",\n                type: \"boolean\"\n            },\n            customerIdentifier: {\n                description: \"A (e.g. vendor specific) identifier of the customer this request refers to. This field contains a custom identifier other than IdToken and Certificate.\\r\\nOne of the possible identifiers (customerIdentifier, customerIdToken or customerCertificate) should be in the request message.\",\n                type: \"string\",\n                maxLength: 64\n            }\n        },\n        required: [\"requestId\", \"report\", \"clear\"]\n    };\n\n    validate = (formData, errors) => {\n        let json = null;\n        if (formData.hasOwnProperty(\"customData\")) {\n            if (formData.customData.hasOwnProperty(\"jsonString\")){\n                if(formData.customData.jsonString.length > 0){\n                    try {\n                        json = JSON.parse(formData.customData.jsonString);\n                        if(!json.hasOwnProperty(\"vendorId\")){\n                            errors.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                        }\n                    } catch (e) {\n                        errors.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                    }\n                }\n            }\n        }\n        if (formData.customerCertificate.hasOwnProperty(\"customData\")) {\n            if (formData.customerCertificate.customData.hasOwnProperty(\"jsonString\")){\n                if(formData.customerCertificate.customData.jsonString.length > 0){\n                    try {\n                        json = JSON.parse(formData.customerCertificate.customData.jsonString);\n                        if(!json.hasOwnProperty(\"vendorId\")){\n                            errors.customerCertificate.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                        }\n                    } catch {\n                        errors.customerCertificate.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                    }\n                }\n            }\n        }\n        if (formData.idToken.hasOwnProperty(\"customData\")) {\n            if (formData.idToken.customData.hasOwnProperty(\"jsonString\")){\n                if(formData.idToken.customData.jsonString.length > 0){\n                    try {\n                        json = JSON.parse(formData.idToken.customData.jsonString);\n                        if(!json.hasOwnProperty(\"vendorId\")){\n                            errors.idToken.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                        }\n                    } catch (e) {\n                        errors.idToken.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                    }\n                }\n            }\n        }\n        if(formData.idToken.hasOwnProperty(\"additionalInfo\")){\n            formData.idToken.additionalInfo.forEach((value, index) => {\n                try {\n                    json = JSON.parse(value.customData.jsonString);\n                    if(!json.hasOwnProperty(\"vendorId\")){\n                        errors.idToken.additionalInfo[index].customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                    }\n                } catch (e) {\n                    errors.idToken.additionalInfo[index].customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                }\n            });\n        }\n        return errors;\n    }\n\n    onSubmit = async ({formData}) => {\n        formData = this.formatCustomData(formData);\n        formData.customerCertificate = this.formatCustomData(formData.customerCertificate);\n        formData.idToken = this.formatCustomData(formData.idToken);\n        if (formData.idToken.hasOwnProperty(\"additionalInfo\")){\n            formData.idToken.additionalInfo.forEach((value, index) => {\n                formData.idToken.additionalInfo[index] = this.formatCustomData(value)\n            })\n        }\n        const json = this.formatData(formData);\n        window.alert(json);\n        await axios.post(`http://${IP_AND_PORT}/api/post-request`,\n             json, {headers: {'Content-Type': 'application/json'}});\n    }\n\n}\n\nexport default CustomerInformation;","import _common from \"./_common\";\nimport axios from \"axios\";\nimport {IP_AND_PORT} from \"../../config\";\n\nclass DataTransfer extends _common {\n    requestName=\"DataTransfer\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            messageId: {\n                description: \"May be used to indicate a specific message or implementation.\",\n                type: \"string\",\n                maxLength: 50\n            },\n            data: {\n                description: \"Data without specified length or format. This needs to be decided by both parties (Open to implementation).\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON string\",\n                        description: \"type any JSON string you need\",\n                        default: \"{}\",\n                        type: \"string\"\n                    }\n                }\n            },\n            vendorId: {\n                description: \"This identifies the Vendor specific implementation\",\n                type: \"string\",\n                maxLength: 255\n            }\n        },\n        required: [\"vendorId\"]\n    };\n\n    validate = (formData, errors) => {\n        let json = null;\n        if (formData.hasOwnProperty(\"customData\")) {\n            if (formData.customData.hasOwnProperty(\"jsonString\")){\n                if(formData.customData.jsonString.length > 0){\n                    try {\n                        json = JSON.parse(formData.customData.jsonString);\n                        if(!json.hasOwnProperty(\"vendorId\")){\n                            errors.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                        }\n                    } catch {\n                        errors.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                    }\n                }\n            }\n        }\n        if (formData.hasOwnProperty(\"data\")) {\n            if (formData.data.hasOwnProperty(\"jsonString\")){\n                if(formData.data.jsonString.length > 0){\n                    try {\n                        json = JSON.parse(formData.data.jsonString);\n                    } catch (e) {\n                        errors.data.jsonString.addError(\"cannot parse this field into JSON string\");\n                    }\n                }\n            }\n        }\n        return errors;\n    }\n\n    formatData = (formData) => {\n        let newFormData = {clientId: this.props.uid, charger: this.props.charger, selected: this.requestName,\n            payload: formData};\n        newFormData.payload.data = JSON.parse(newFormData.payload.data.jsonString);\n        return JSON.stringify(newFormData);\n    };\n\n    onSubmit = async ({formData}) => {\n        formData = this.formatCustomData(formData);\n        const json = this.formatData(formData);\n        window.alert(json);\n        await axios.post(`http://${IP_AND_PORT}/api/post-request`,\n             json, {headers: {'Content-Type': 'application/json'}});\n    }\n}\n\nexport default DataTransfer;","import _common from \"./_common\";\nimport axios from \"axios\";\nimport {IP_AND_PORT} from \"../../config\";\n\nclass DeleteCertificate extends _common {\n    requestName = \"DeleteCertificate\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n            HashAlgorithmEnumType: {\n                description: \"Used algorithms for the hashes provided.\",\n                type: \"string\",\n                enum: [\"SHA256\", \"SHA384\", \"SHA512\"]\n            },\n            CertificateHashDataType: {\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    hashAlgorithm: {\n                        $ref: \"#/definitions/HashAlgorithmEnumType\"\n                    },\n                    issuerNameHash: {\n                        description: \"Hashed value of the Issuer DN (Distinguished Name).\",\n                        type: \"string\",\n                        maxLength: 128\n                    },\n                    issuerKeyHash: {\n                        description: \"Hashed value of the issuers public key\\r\\n\",\n                        type: \"string\",\n                        maxLength: 128\n                    },\n                    serialNumber: {\n                        description: \"The serial number of the certificate.\\r\\n\",\n                        type: \"string\",\n                        maxLength: 40\n                    }\n                },\n                required: [\"hashAlgorithm\", \"issuerNameHash\", \"issuerKeyHash\", \"serialNumber\"]\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            certificateHashData: {\n                $ref: \"#/definitions/CertificateHashDataType\"\n            }\n        },\n        required: [\"certificateHashData\"]\n    }\n\n    validate = (formData, errors) => {\n        let json = null;\n        if (formData.customData.jsonString.length > 0) {\n            try {\n                json = JSON.parse(formData.customData.jsonString);\n                if (!json.hasOwnProperty(\"vendorId\")) {\n                    errors.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                }\n            } catch {\n                errors.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n            }\n        }\n        if (formData.certificateHashData.customData.jsonString.length > 0) {\n            try {\n                json = JSON.parse(formData.certificateHashData.customData.jsonString);\n                if (!json.hasOwnProperty(\"vendorId\")) {\n                    errors.certificateHashData.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\")\n                }\n            } catch {\n                errors.certificateHashData.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n            }\n        }\n        return errors;\n    }\n\n    onSubmit = async ({formData}) => {\n        formData = this.formatCustomData(formData);\n        formData.certificateHashData = this.formatCustomData(formData.certificateHashData);\n        const json = this.formatData(formData);\n        window.alert(json);\n        await axios.post(`http://${IP_AND_PORT}/api/post-request`,\n            json, {headers: {'Content-Type': 'application/json'}});\n    }\n}\n\nexport default DeleteCertificate;","import _common from \"./_common\";\n\nclass GetBaseReport extends _common {\n    requestName=\"GetBaseReport\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n            ReportBaseEnumType: {\n                description: \"This field specifies the report base.\",\n                type: \"string\",\n                enum: [\"ConfigurationInventory\", \"FullInventory\", \"SummaryInventory\"]\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            requestId: {\n                description: \"The Id of the request.\",\n                type: \"integer\"\n            },\n            reportBase: {\n                $ref: \"#/definitions/ReportBaseEnumType\"\n            }\n        },\n        required: [\"requestId\", \"reportBase\"]\n    }\n}\n\nexport default GetBaseReport;","import _common from \"./_common\";\nimport axios from \"axios\";\nimport {IP_AND_PORT} from \"../../config\";\n\nclass GetChargingProfiles extends _common {\n    requestName=\"GetChargingProfiles\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n            ChargingLimitSourceEnumType: {\n                type: \"string\",\n                enum: [\"EMS\", \"Other\", \"SO\", \"CSO\"]\n            },\n            ChargingProfilePurposeEnumType: {\n                description: \"Defines the purpose of the schedule transferred by this profile\",\n                type: \"string\",\n                enum: [\"ChargingStationExternalConstraints\", \"ChargingStationMaxProfile\", \"TxDefaultProfile\", \"TxProfile\"]\n            },\n            ChargingProfileCriterionType: {\n                description: \"A ChargingProfile consists of ChargingSchedule, describing the amount of power or \" +\n                    \"current that can be delivered per time interval.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    chargingProfilePurpose: {\n                        $ref: \"#/definitions/ChargingProfilePurposeEnumType\"\n                    },\n                    stackLevel: {\n                        description: \"Value determining level in hierarchy stack of profiles. Higher values have \" +\n                            \"precedence over lower values. Lowest level is 0.\",\n                        type: \"integer\"\n                    },\n                    chargingProfileId: {\n                        description: \"List of all the chargingProfileIds requested. Any ChargingProfile that matches \" +\n                            \"one of these profiles will be reported. If omitted, the Charging Station SHALL not filter\" +\n                            \" on chargingProfileId. This field SHALL NOT contain more ids than set in \" +\n                            \"<<configkey-charging-profile-entries,ChargingProfileEntries.maxLimit>>\",\n                        type: \"array\",\n                        items: {\n                            type: \"integer\"\n                        },\n                        minItems: 1\n                    },\n                    chargingLimitSource: {\n                        description: \"For which charging limit sources, charging profiles SHALL be reported. \" +\n                            \"If omitted, the Charging Station SHALL not filter on chargingLimitSource.\",\n                        type: \"array\",\n                        items: {\n                            $ref: \"#/definitions/ChargingLimitSourceEnumType\"\n                        },\n                        minItems: 1,\n                        maxItems: 4\n                    }\n                }\n            }\n\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            requestId: {\n                description: \"Reference identification that is to be used by the Charging Station in the &lt;&lt;reportchargingprofilesrequest, ReportChargingProfilesRequest&gt;&gt; when provided.\\r\\n\",\n                type: \"integer\"\n            },\n            evseId: {\n                description: \"For which EVSE installed charging profiles SHALL be reported. If 0, only charging profiles installed on the Charging Station itself (the grid connection) SHALL be reported. If omitted, all installed charging profiles SHALL be reported.\\r\\n\",\n                type: \"integer\"\n            },\n            chargingProfile: {\n                $ref: \"#/definitions/ChargingProfileCriterionType\"\n            }\n        },\n        required: [\"requestId\", \"chargingProfile\"]\n    };\n\n    validate = (formData, errors) => {\n        let json = null;\n        if(formData.customData.jsonString.length > 0){\n            try {\n                json = JSON.parse(formData.customData.jsonString);\n                if(!json.hasOwnProperty(\"vendorId\")){\n                    errors.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                }\n            } catch {\n                errors.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n            }\n        }\n        if(formData.chargingProfile.customData.jsonString.length > 0){\n            try {\n                json = JSON.parse(formData.chargingProfile.customData.jsonString);\n                if(!json.hasOwnProperty(\"vendorId\")){\n                    errors.chargingProfile.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\")\n                }\n            } catch {\n                errors.chargingProfile.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n            }\n        }\n        return errors;\n    }\n\n    onSubmit = async ({formData}) => {\n        formData = this.formatCustomData(formData);\n        const json = this.formatData(formData);\n        window.alert(json);\n        await axios.post(`http://${IP_AND_PORT}/api/post-request`,\n             json, {headers: {'Content-Type': 'application/json'}});\n    }\n}\n\nexport default GetChargingProfiles;","import _common from \"./_common\";\n\nclass GetCompositeSchedule extends _common {\n    requestName=\"GetCompositeSchedule\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n            ChargingRateUnitEnumType: {\n                description: \"Can be used to force a power or current profile.\",\n                type: \"string\",\n                enum: [\"W\", \"A\"]\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            duration: {\n                description: \"Length of the requested schedule in seconds.\",\n                type: \"integer\"\n            },\n            chargingRateUnit: {\n                $ref: \"#/definitions/ChargingRateUnitEnumType\"\n            },\n            evseId: {\n                description: \"The ID of the EVSE for which the schedule is requested. When evseid=0, the Charging Station will calculate the expected consumption for the grid connection.\\r\\n\",\n                type: \"integer\"\n            }\n        },\n        required: [\"duration\", \"evseId\"]\n    }\n}\n\nexport default GetCompositeSchedule;","import _common from \"./_common\";\n\nclass GetDisplayMessages extends _common {\n    requestName=\"GetDisplayMessages\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n            MessagePriorityEnumType: {\n                description: \"If provided the Charging Station shall return Display Messages with the given priority only.\",\n                type: \"string\",\n                enum: [\"AlwaysFront\", \"InFront\", \"NormalCycle\"]\n            },\n            MessageStateEnumType: {\n                description: \"If provided the Charging Station shall return Display Messages with the given state only.\",\n                type: \"string\",\n                enum: [\"Charging\", \"Faulted\", \"Idle\", \"Unavailable\"]\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            id: {\n                description: \"If provided the Charging Station shall return Display Messages of the given ids. This field SHALL NOT contain more ids than set in <<configkey-number-of-display-messages,NumberOfDisplayMessages.maxLimit>>\",\n                type: \"array\",\n                items: {\n                    type: \"integer\"\n                },\n                minItems: 1\n            },\n            requestId: {\n                description: \"The Id of this request.\",\n                type: \"integer\"\n            },\n            priority: {\n                $ref: \"#/definitions/MessagePriorityEnumType\"\n            },\n            state: {\n                $ref: \"#/definitions/MessageStateEnumType\"\n            }\n        },\n        required: [\"requestId\"]\n    }\n}\n\nexport default GetDisplayMessages;","import _common from \"./_common\";\n\nclass GetInstalledCertificateIds extends _common {\n    requestName=\"GetInstalledCertificateIds\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n            GetCertificateIdUseEnumType: {\n                type: \"string\",\n                enum: [\"V2GRootCertificate\", \"MORootCertificate\", \"CSMSRootCertificate\",\n                    \"V2GCertificateChain\", \"ManufacturerRootCertificate\" ]\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            certificateType: {\n                description: \"Indicates the type of certificates requested. When omitted, all certificate types are requested.\\r\\n\",\n                type: \"array\",\n                items: {\n                    $ref: \"#/definitions/GetCertificateIdUseEnumType\"\n                },\n                minItems: 1\n            }\n        }\n    }\n}\n\nexport default GetInstalledCertificateIds;","import _common from './_common';\n\nclass GetLocalListVersion extends _common {\n     requestName=\"GetLocalListVersion\";\n     schema={\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            }\n        }\n     }\n}\n\nexport default GetLocalListVersion; ","import _common from './_common';\nimport axios from \"axios\";\nimport {IP_AND_PORT} from \"../../config\";\n\nclass GetLog extends _common {\n     requestName=\"GetLog\";\n     schema={\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n            LogEnumType: {\n                description: \"This contains the type of log file that the Charging Station should send.\",\n                type: \"string\",\n                enum: [\"DiagnosticsLog\", \"SecurityLog\"]\n            },\n            LogParametersType: {\n                description: \"Generic class for the configuration of logging entries.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    remoteLocation: {\n                        description: \"The URL of the location at the remote system where the log should be stored.\",\n                        type: \"string\",\n                        maxLength: 512\n                    },\n                    oldestTimestamp: {\n                        description: \"This contains the date and time of the oldest logging information to include \" +\n                            \"in the diagnostics.\",\n                        type: \"string\",\n                        format: \"date-time\"\n                    },\n                    latestTimestamp: {\n                        description: \"This contains the date and time of the latest logging information to include \" +\n                            \"in the diagnostics.\",\n                        type: \"string\",\n                        format: \"date-time\"\n                    }\n                },\n                required: [\"remoteLocation\"]\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            log: {\n                $ref: \"#/definitions/LogParametersType\"\n            },\n            logType: {\n                $ref: \"#/definitions/LogEnumType\"\n            },\n            requestId: {\n                description: \"The Id of this request\",\n                type: \"integer\"\n            },\n            retries: {\n                description: \"This specifies how many times the Charging Station must try to upload the log before \" +\n                    \"giving up. If this field is not present, it is left to Charging Station to decide how many \" +\n                    \"times it wants to retry.\",\n                type: \"integer\"\n            },\n            retryInterval: {\n                description: \"The interval in seconds after which a retry may be attempted. If this field is not \" +\n                    \"present, it is left to Charging Station to decide how long to wait between attempts.\",\n                type: \"integer\"\n            }\n        },\n         required: [\"logType\", \"requestId\", \"log\"]\n     }\n\n    validate = (formData, errors) => {\n         let json = null;\n        if (formData.hasOwnProperty(\"customData\")) {\n            if (formData.customData.hasOwnProperty(\"jsonString\")){\n                if(formData.customData.jsonString.length > 0){\n                    try {\n                        json = JSON.parse(formData.customData.jsonString);\n                        if(!json.hasOwnProperty(\"vendorId\")){\n                            errors.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                        }\n                    } catch {\n                        errors.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                    }\n                }\n\n            }\n        }\n        if (formData.log.hasOwnProperty(\"customData\")) {\n            if (formData.log.customData.hasOwnProperty(\"jsonString\")){\n                if(formData.log.customData.jsonString.length > 0){\n                    try {\n                        json = JSON.parse(formData.log.customData.jsonString);\n                        if(!json.hasOwnProperty(\"vendorId\")){\n                            errors.log.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\")\n                        }\n                    } catch (e) {\n                        errors.log.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                    }\n                }\n            }\n        }\n        return errors;\n    }\n\n    onSubmit = async ({formData}) => {\n        formData = this.formatCustomData(formData);\n        formData.log = this.formatCustomData(formData.log);\n        const json = this.formatData(formData);\n        window.alert(json);\n        await axios.post(`http://${IP_AND_PORT}/api/post-request`,\n             json, {headers: {'Content-Type': 'application/json'}});\n    }\n}\n\nexport default GetLog;","import _common from './_common';\nimport axios from \"axios\";\nimport {IP_AND_PORT} from \"../../config\";\n\nclass GetMonitoringReport extends _common {\n    requestName = \"GetMonitoringReport\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n            MonitoringCriterionEnumType: {\n                type: \"string\",\n                enum: [\"ThresholdMonitoring\", \"DeltaMonitoring\", \"PeriodicMonitoring\"]\n            },\n            ComponentType: {\n                description: \"A physical or logical component\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    evse: {\n                        $ref: \"#/definitions/EVSEType\"\n                    },\n                    name: {\n                        description: \"Name of the component. Name should be taken from the list of standardized component names whenever possible. Case Insensitive. strongly advised to use Camel Case.\",\n                        type: \"string\",\n                        maxLength: 50\n                    },\n                    instance: {\n                        description: \"Name of instance in case the component exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\\r\\n\",\n                        type: \"string\",\n                        maxLength: 50\n                    }\n                },\n                required: [\"name\"]\n            },\n            ComponentVariableType: {\n                description: \"Class to report components, variables and variable attributes and characteristics.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    component: {\n                        $ref: \"#/definitions/ComponentType\"\n                    },\n                    variable: {\n                        $ref: \"#/definitions/VariableType\"\n                    }\n                },\n                required: [\"component\"]\n            },\n            EVSEType: {\n                description: \"Electric Vehicle Supply Equipment\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    id: {\n                        description: \"EVSE Identifier. This contains a number > 0 designating an EVSE of the Charging Station.\",\n                        type: \"integer\"\n                    },\n                    connectorId: {\n                        description: \"An id to designate a specific connector (on an EVSE) by connector index number.\",\n                        type: \"integer\"\n                    }\n                },\n                required: [\"id\"]\n            },\n            VariableType: {\n                description: \"Reference key to a component-variable.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    name: {\n                        description: \"Name of the variable. Name should be taken from the list of standardized variable names whenever possible. Case Insensitive. strongly advised to use Camel Case.\",\n                        type: \"string\",\n                        maxLength: 50\n                    },\n                    instance: {\n                        description: \"Name of instance in case the variable exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\",\n                        type: \"string\",\n                        maxLength: 50\n                    }\n                },\n                required: [\"name\"]\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            componentVariable: {\n                type: \"array\",\n                items: {\n                    $ref: \"#/definitions/ComponentVariableType\"\n                },\n                minItems: 1\n            },\n            requestId: {\n                description: \"The Id of the request.\",\n                type: \"integer\"\n            },\n            monitoringCriteria: {\n                description: \"This field contains criteria for components for which a monitoring report is requested\",\n                type: \"array\",\n                items: {\n                    $ref: \"#/definitions/MonitoringCriterionEnumType\"\n                },\n                minItems: 1,\n                maxItems: 3\n            }\n        }\n    }\n\n    validate = (formData, errors) => {\n        let json = null;\n        if (formData.hasOwnProperty(\"customData\")) {\n            if (formData.customData.hasOwnProperty(\"jsonString\")) {\n                if (formData.customData.jsonString.length > 0) {\n                    try {\n                        json = JSON.parse(formData.customData.jsonString);\n                        if(!json.hasOwnProperty(\"vendorId\")){\n                            errors.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                        }\n                    } catch (e) {\n                        errors.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                    }\n                }\n\n            }\n        }\n        if (formData.hasOwnProperty(\"componentVariable\")) {\n            formData.componentVariable.forEach((value, index) => {\n                try {\n                    json = JSON.parse(value.customData.jsonString);\n                    if(!json.hasOwnProperty(\"vendorId\")){\n                        errors.componentVariable[index].customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\")\n                    }\n                } catch {\n                    errors.componentVariable[index].customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                }\n                try {\n                    json = JSON.parse(value.component.customData.jsonString);\n                    if(!json.hasOwnProperty(\"vendorId\")){\n                        errors.componentVariable[index].component.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                    }\n                } catch {\n                    errors.componentVariable[index].component.customData.jsonString.addError(\"cannot parse this field into JSON string\")\n                }\n                try {\n                    json = JSON.parse(value.component.evse.customData.jsonString);\n                    if(!json.hasOwnProperty(\"vendorId\")){\n                        errors.componentVariable[index].component.evse.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                    }\n                } catch {\n                    errors.componentVariable[index].component.evse.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                }\n                try {\n                    json = JSON.parse(value.variable.customData.jsonString);\n                    if(!json.hasOwnProperty(\"vendorId\")){\n                        errors.componentVariable[index].variable.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                    }\n                } catch {\n                    errors.componentVariable[index].variable.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                }\n\n            })\n        }\n        return errors;\n    }\n\n    onSubmit = async ({formData}) => {\n        formData = this.formatCustomData(formData);\n        formData.componentVariable.forEach((value, index) => {\n            formData.componentVariable[index] = this.formatCustomData(value);\n            formData.componentVariable[index].component = this.formatCustomData(value.component);\n            formData.componentVariable[index].component.evse = this.formatCustomData(value.component.evse);\n            formData.componentVariable[index].variable = this.formatCustomData(value.variable);\n        });\n        const json = this.formatData(formData);\n        window.alert(json);\n        await axios.post(`http://${IP_AND_PORT}/api/post-request`,\n             json, {headers: {'Content-Type': 'application/json'}});\n    }\n}\n\nexport default GetMonitoringReport;","import _common from './_common';\nimport axios from \"axios\";\nimport {IP_AND_PORT} from \"../../config\";\n\nclass GetReport extends _common {\n    requestName = \"GetReport\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n            ComponentCriterionEnumType: {\n                type: \"string\",\n                enum: [\"Active\", \"Available\", \"Enabled\", \"Problem\"]\n            },\n            ComponentType: {\n                description: \"A physical or logical component\\r\\n\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    evse: {\n                        $ref: \"#/definitions/EVSEType\"\n                    },\n                    name: {\n                        description: \"Name of the component. Name should be taken from the list of standardized component names whenever possible. Case Insensitive. strongly advised to use Camel Case.\",\n                        type: \"string\",\n                        maxLength: 50\n                    },\n                    instance: {\n                        description: \"Name of instance in case the component exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\",\n                        type: \"string\",\n                        maxLength: 50\n                    }\n                },\n                required: [\"name\"]\n            },\n            ComponentVariableType: {\n                description: \"Class to report components, variables and variable attributes and characteristics.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    component: {\n                        $ref: \"#/definitions/ComponentType\"\n                    },\n                    variable: {\n                        $ref: \"#/definitions/VariableType\"\n                    }\n                },\n                required: [\"component\"]\n            },\n            EVSEType: {\n                description: \"Electric Vehicle Supply Equipment\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    id: {\n                        description: \"EVSE Identifier. This contains a number > 0 designating an EVSE of the Charging Station.\",\n                        type: \"integer\"\n                    },\n                    connectorId: {\n                        description: \"An id to designate a specific connector (on an EVSE) by connector index number.\",\n                        type: \"integer\"\n                    }\n                },\n                required: [\"id\"]\n            },\n            VariableType: {\n                description: \"Reference key to a component-variable.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    name: {\n                        description: \"Name of the variable. Name should be taken from the list of standardized variable names whenever possible. Case Insensitive. strongly advised to use Camel Case.\",\n                        type: \"string\",\n                        maxLength: 50\n                    },\n                    instance: {\n                        description: \"Name of instance in case the variable exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\",\n                        type: \"string\",\n                        maxLength: 50\n                    }\n                },\n                required: [\"name\"]\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            componentVariable: {\n                type: \"array\",\n                items: {\n                    $ref: \"#/definitions/ComponentVariableType\"\n                },\n                minItems: 1\n            },\n            requestId: {\n                description: \"The Id of the request.\",\n                type: \"integer\"\n            },\n            componentCriteria: {\n                description: \"This field contains criteria for components for which a report is requested\",\n                type: \"array\",\n                items: {\n                    $ref: \"#/definitions/ComponentCriterionEnumType\"\n                },\n                minItems: 1,\n                maxItems: 4\n            }\n        },\n        required: [\"requestId\"]\n    }\n\n    validate = (formData, errors) => {\n        let json = null;\n        if (formData.hasOwnProperty(\"customData\")) {\n            if (formData.customData.hasOwnProperty(\"jsonString\")) {\n                if (formData.customData.jsonString.length > 0) {\n                    try {\n                        json = JSON.parse(formData.customData.jsonString);\n                        if (!json.hasOwnProperty(\"vendorId\")) {\n                            errors.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                        }\n                    } catch (e) {\n                        errors.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                    }\n                }\n            }\n        }\n        formData.componentVariable.forEach((value, index) => {\n            try {\n                json = JSON.parse(value.customData.jsonString);\n                if (!json.hasOwnProperty(\"vendorId\")) {\n                    errors.componentVariable[index].customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                }\n            } catch {\n                errors.componentVariable[index].customData.jsonString.addError(\"cannot parse this field into JSON string\")\n            }\n            try {\n                json = JSON.parse(value.component.customData.jsonString);\n                if (!json.hasOwnProperty(\"vendorId\")) {\n                    errors.componentVariable[index].component.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                }\n            } catch {\n                errors.componentVariable[index].component.customData.jsonString.addError(\"cannot parse this field into JSON string\")\n            }\n            try {\n                json = JSON.parse(value.component.evse.customData.jsonString);\n                if (!json.hasOwnProperty(\"vendorId\")) {\n                    errors.componentVariable[index].component.evse.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                }\n            } catch {\n                errors.componentVariable[index].component.evse.customData.jsonString.addError(\"cannot parse this field into JSON string\")\n            }\n            try {\n                json = JSON.parse(value.variable.customData.jsonString);\n                if (!json.hasOwnProperty(\"vendorId\")) {\n                    errors.componentVariable[index].variable.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                }\n            } catch {\n                errors.componentVariable[index].variable.customData.jsonString.addError(\"cannot parse this field into JSON string\")\n            }\n\n        })\n\n\n        return errors;\n    }\n\n    onSubmit = async ({formData}) => {\n        formData = this.formatCustomData(formData);\n        formData.componentVariable.forEach((value, index) => {\n            formData.componentVariable[index] = this.formatCustomData(value);\n            formData.componentVariable[index].component = this.formatCustomData(value.component);\n            formData.componentVariable[index].component.evse = this.formatCustomData(value.component.evse);\n            formData.componentVariable[index].variable = this.formatCustomData(value.variable);\n        });\n        const json = this.formatData(formData);\n        window.alert(json);\n        await axios.post(`http://${IP_AND_PORT}/api/post-request`,\n            json, {headers: {'Content-Type': 'application/json'}});\n    }\n}\n\nexport default GetReport;","import _common from './_common';\n\nclass GetTransactionStatus extends _common {\n    requestName = \"GetTransactionStatus\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            transactionId: {\n                description: \"The Id of the transaction for which the status is requested.\",\n                type: \"string\",\n                maxLength: 36\n            }\n        }\n    }\n}\n\nexport default GetTransactionStatus;","import _common from './_common';\nimport axios from \"axios\";\nimport {IP_AND_PORT} from \"../../config\";\n\nclass GetVariables extends _common {\n    requestName = \"GetVariables\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n            AttributeEnumType: {\n                description: \"Attribute type for which value is requested. When absent, default Actual is assumed.\",\n                type: \"string\",\n                default: \"Actual\",\n                enum: [\"Actual\", \"Target\", \"MinSet\", \"MaxSet\"]\n            },\n            ComponentType: {\n                description: \"A physical or logical component\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    evse: {\n                        $ref: \"#/definitions/EVSEType\"\n                    },\n                    name: {\n                        description: \"Name of the component. Name should be taken from the list of standardized component names whenever possible. Case Insensitive. strongly advised to use Camel Case.\",\n                        type: \"string\",\n                        maxLength: 50\n                    },\n                    instance: {\n                        description: \"Name of instance in case the component exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\",\n                        type: \"string\",\n                        maxLength: 50\n                    }\n                },\n                required: [\"name\"]\n            },\n            EVSEType: {\n                description: \"Electric Vehicle Supply Equipment\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    id: {\n                        description: \"EVSE Identifier. This contains a number > 0 designating an EVSE of the Charging Station.\",\n                        type: \"integer\"\n                    },\n                    connectorId: {\n                        description: \"An id to designate a specific connector (on an EVSE) by connector index number.\",\n                        type: \"integer\"\n                    }\n                },\n                required: [\"id\"]\n            },\n            GetVariableDataType: {\n                description: \"Class to hold parameters for GetVariables request.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    attributeType: {\n                        $ref: \"#/definitions/AttributeEnumType\"\n                    },\n                    component: {\n                        $ref: \"#/definitions/ComponentType\"\n                    },\n                    variable: {\n                        $ref: \"#/definitions/VariableType\"\n                    }\n                },\n                required: [\"component\", \"variable\"]\n            },\n            VariableType: {\n                description: \"Reference key to a component-variable.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    name: {\n                        description: \"Name of the variable. Name should be taken from the list of standardized variable names whenever possible. Case Insensitive. strongly advised to use Camel Case.\",\n                        type: \"string\",\n                        maxLength: 50\n                    },\n                    instance: {\n                        description: \"Name of instance in case the variable exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\",\n                        type: \"string\",\n                        maxLength: 50\n                    }\n                },\n                required: [\"name\"]\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            getVariableData: {\n                type: \"array\",\n                items: {\n                    $ref: \"#/definitions/GetVariableDataType\"\n                },\n                minItems: 1\n            }\n        },\n        required: [\"getVariableData\"]\n    }\n\n    validate = (formData, errors) => {\n        let json = null;\n        if (formData.hasOwnProperty(\"customData\")) {\n            if (formData.customData.hasOwnProperty(\"jsonString\")) {\n                if (formData.customData.jsonString.length > 0) {\n                    try {\n                        json = JSON.parse(formData.customData.jsonString);\n                        if(!json.hasOwnProperty(\"vendorId\")){\n                            errors.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                        }\n                    } catch {\n                        errors.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                    }\n                }\n\n            }\n        }\n        if (formData.hasOwnProperty(\"getVariableData\")) {\n            formData.getVariableData.forEach((value, index) => {\n                console.log(errors.getVariableData[index]);\n                try {\n                    json = JSON.parse(value.customData.jsonString);\n                    if(!json.hasOwnProperty(\"vendorId\")){\n                        errors.getVariableData[index].customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                    }\n                } catch {\n                    // Uncaught TypeError: Cannot read property 'jsonString' of undefined\n\n                    errors.getVariableData[index].customData.jsonString.addError(\"cannot parse this field into JSON string\")\n                }\n                try {\n                    json = JSON.parse(value.attributeType.customData.jsonString);\n                    if(!json.hasOwnProperty(\"vendorId\")){\n                        errors.getVariableData[index].attributeType.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                    }\n                } catch {\n                    errors.getVariableData[index].attributeType.customData.jsonString.addError(\"cannot parse this field into JSON string\")\n                }\n                try {\n                    json = JSON.parse(value.component.customData.jsonString);\n                    if(!json.hasOwnProperty(\"vendorId\")){\n                        errors.getVariableData[index].component.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                    }\n                } catch {\n                    errors.getVariableData[index].component.customData.jsonString.addError(\"cannot parse this field into JSON string\")\n                }\n                try {\n                    json = JSON.parse(value.component.evse.customData.jsonString);\n                    if(!json.hasOwnProperty(\"vendorId\")){\n                        errors.getVariableData[index].component.evse.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                    }\n                } catch {\n                    errors.getVariableData[index].component.evse.customData.jsonString.addError(\"cannot parse this field into JSON string\")\n                }\n                try {\n                    json = JSON.parse(value.variable.customData.jsonString);\n                    if(!json.hasOwnProperty(\"vendorId\")){\n                        errors.getVariableData[index].variable.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                    }\n                } catch {\n                    errors.getVariableData[index].variable.customData.jsonString.addError(\"cannot parse this field into JSON string\")\n                }\n\n            })\n        }\n        return errors;\n    }\n\n    onSubmit = async ({formData}) => {\n        formData = this.formatCustomData(formData);\n        formData.componentVariable.forEach((value, index) => {\n            formData.componentVariable[index] = this.formatCustomData(value);\n            formData.componentVariable[index].attributeType = this.formatCustomData(value.attributeType);\n            formData.componentVariable[index].component = this.formatCustomData(value.component);\n            formData.componentVariable[index].component.evse = this.formatCustomData(value.component.evse);\n            formData.componentVariable[index].variable = this.formatCustomData(value.variable);\n        });\n        const json = this.formatData(formData);\n        window.alert(json);\n        await axios.post(`http://${IP_AND_PORT}/api/post-request`,\n             json, {headers: {'Content-Type': 'application/json'}});\n    }\n}\n\nexport default GetVariables;","import _common from './_common';\n\nclass InstallCertificate extends _common {\n    requestName = \"InstallCertificate\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n            InstallCertificateUseEnumType: {\n                description: \"Indicates the certificate type that is sent.\",\n                type: \"string\",\n                enum: [\"V2GRootCertificate\", \"MORootCertificate\", \"CSMSRootCertificate\", \"ManufacturerRootCertificate\"]\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            certificateType: {\n                $ref: \"#/definitions/InstallCertificateUseEnumType\"\n            },\n            certificate: {\n                description: \"A PEM encoded X.509 certificate.\",\n                type: \"string\",\n                maxLength: 5500\n            }\n        },\n        required: [\"certificateType\", \"certificate\"]\n    }\n}\n\nexport default InstallCertificate;","import _common from './_common';\n\nclass PublishFirmware extends _common {\n    requestName = \"PublishFirmware\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            location: {\n                description: \"This contains a string containing a URI pointing to a\\r\\nlocation from which to retrieve the firmware.\",\n                type: \"string\",\n                maxLength: 512\n            },\n            retries: {\n                description: \"This specifies how many times Charging Station must try\\r\\nto download the firmware before giving up. If this field is not\\r\\npresent, it is left to Charging Station to decide how many times it wants to retry.\",\n                type: \"integer\"\n            },\n            checksum: {\n                description: \"The MD5 checksum over the entire firmware file as a hexadecimal string of length 32. \\r\\n\",\n                type: \"string\",\n                maxLength: 32\n            },\n            requestId: {\n                description: \"The Id of the request.\",\n                type: \"integer\"\n            },\n            retryInterval: {\n                description: \"The interval in seconds\\r\\nafter which a retry may be\\r\\nattempted. If this field is not\\r\\npresent, it is left to Charging\\r\\nStation to decide how long to wait\\r\\nbetween attempts.\",\n                type: \"integer\"\n            }\n        },\n        required: [\"location\", \"checksum\", \"requestId\"]\n    }\n}\n\nexport default PublishFirmware;","import _common from './_common';\nimport axios from \"axios\";\nimport {IP_AND_PORT} from \"../../config\";\n\nclass ReserveNow extends _common {\n    requestName = \"ReserveNow\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n            ConnectorEnumType: {\n                description: \"This field specifies the connector type.\",\n                type: \"string\",\n                enum: [\"cCCS1\", \"cCCS2\", \"cG105\", \"cTesla\", \"cType1\", \"cType2\", \"s309-1P-16A\", \"s309-1P-32A\",\n                    \"s309-3P-16A\", \"s309-3P-32A\", \"sBS1361\", \"sCEE-7-7\", \"sType2\", \"sType3\", \"Other1PhMax16A\",\n                    \"Other1PhOver16A\", \"Other3Ph\", \"Pan\", \"wInductive\", \"wResonant\", \"Undetermined\", \"Unknown\"]\n            },\n            IdTokenEnumType: {\n                description: \"Enumeration of possible idToken types.\",\n                type: \"string\",\n                enum: [\"Central\", \"eMAID\", \"ISO14443\", \"ISO15693\", \"KeyCode\", \"Local\", \"MacAddress\", \"NoAuthorization\"]\n            },\n            AdditionalInfoType: {\n                description: \"Contains a case insensitive identifier to use for the authorization and the type of \" +\n                    \"authorization to support multiple forms of identifiers.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    additionalIdToken: {\n                        description: \"This field specifies the additional IdToken.\",\n                        type: \"string\",\n                        maxLength: 36\n                    },\n                    type: {\n                        description: \"This defines the type of the additionalIdToken. This is a custom type, \" +\n                            \"so the implementation needs to be agreed upon by all involved parties.\",\n                        type: \"string\",\n                        maxLength: 50\n                    }\n                },\n                required: [\"additionalIdToken\", \"type\"]\n            },\n            IdTokenType: {\n                description: \"Contains a case insensitive identifier to use for the authorization and the type of \" +\n                    \"authorization to support multiple forms of identifiers.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    additionalInfo: {\n                        type: \"array\",\n                        items: {\n                            $ref: \"#/definitions/AdditionalInfoType\"\n                        },\n                        minItems: 1\n                    },\n                    idToken: {\n                        description: \"IdToken is case insensitive. Might hold the hidden id of an RFID tag, but can for example also contain a UUID.\",\n                        type: \"string\",\n                        maxLength: 36\n                    },\n                    type: {\n                        $ref: \"#/definitions/IdTokenEnumType\"\n                    }\n                },\n                required: [\"idToken\", \"type\"]\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            id: {\n                description: \"Id of reservation.\",\n                type: \"integer\"\n            },\n            expiryDateTime: {\n                description: \"Date and time at which the reservation expires.\",\n                type: \"string\",\n                format: \"date-time\"\n            },\n            connectorType: {\n                $ref: \"#/definitions/ConnectorEnumType\"\n            },\n            idToken: {\n                $ref: \"#/definitions/IdTokenType\"\n            },\n            evseId: {\n                description: \"This contains ID of the evse to be reserved.\",\n                type: \"integer\"\n            },\n            groupIdToken: {\n                $ref: \"#/definitions/IdTokenType\"\n            }\n        },\n        required: [\"id\", \"expiryDateTime\", \"idToken\"]\n    }\n\n    validate = (formData, errors) => {\n        let json = null;\n        if (formData.hasOwnProperty(\"customData\")) {\n            if (formData.customData.hasOwnProperty(\"jsonString\")) {\n                if (formData.customData.jsonString.length > 0) {\n                    try {\n                        json = JSON.parse(formData.customData.jsonString);\n                        if(!json.hasOwnProperty(\"vendorId\")){\n                            errors.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                        }\n                    } catch {\n                        errors.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                    }\n                }\n            }\n        }\n        if (formData.idToken.hasOwnProperty(\"customData\")) {\n            if (formData.idToken.customData.hasOwnProperty(\"jsonString\")) {\n                if (formData.idToken.customData.jsonString.length > 0) {\n                    try {\n                        json = JSON.parse(formData.idToken.customData.jsonString);\n                        if(!json.hasOwnProperty(\"vendorId\")){\n                            errors.idToken.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                        }\n                    } catch {\n                        errors.idToken.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                    }\n                }\n            }\n        }\n        formData.idToken.additionalInfo.forEach((value, index) => {\n            if(value.customData.hasOwnProperty(\"jsonString\")) {\n                if (value.customData.jsonString.length > 0) {\n                    try {\n                        json = JSON.parse(value.customData.jsonString);\n                        if(!json.hasOwnProperty(\"vendorId\")){\n                            errors.idToken.additionalInfo[index].customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                        }\n                    } catch {\n                        errors.idToken.additionalInfo[index].customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                    }\n                }\n            }\n        });\n        if (formData.groupIdToken.hasOwnProperty(\"customData\")) {\n            if (formData.groupIdToken.customData.hasOwnProperty(\"jsonString\")) {\n                if (formData.groupIdToken.customData.jsonString.length > 0) {\n                    try {\n                        json = JSON.parse(formData.groupIdToken.customData.jsonString);\n                        if(!json.hasOwnProperty(\"vendorId\")){\n                            errors.groupIdToken.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                        }\n                    } catch {\n                        errors.groupIdToken.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                    }\n                }\n            }\n        }\n        formData.groupIdToken.additionalInfo.forEach((value, index) => {\n            if(value.customData.hasOwnProperty(\"jsonString\")) {\n                if (value.customData.jsonString.length > 0) {\n                    try {\n                        json = JSON.parse(value.customData.jsonString);\n                        if(!json.hasOwnProperty(\"vendorId\")){\n                            errors.groupIdToken.additionalInfo[index].customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                        }\n                    } catch {\n                        errors.groupIdToken.additionalInfo[index].customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                    }\n                }\n            }\n        });\n        return errors;\n    }\n\n    onSubmit = async ({formData}) => {\n        formData = this.formatCustomData(formData);\n        formData.idToken = this.formatCustomData(formData.idToken);\n        formData.idToken.additionalInfo.forEach((value, index) => {\n            formData.idToken.additionalInfo[index] = this.formatCustomData(value);\n        });\n        formData.groupIdToken = this.formatCustomData(formData.groupIdToken);\n        formData.groupIdToken.additionalInfo.forEach((value, index) => {\n            formData.groupIdToken.additionalInfo[index] = this.formatCustomData(value);\n        });\n        const json = this.formatData(formData);\n        window.alert(json);\n        await axios.post(`http://${IP_AND_PORT}/api/post-request`,\n             json, {headers: {'Content-Type': 'application/json'}});\n    }\n}\n\nexport default ReserveNow;","import _common from './_common';\n\nclass Reset extends _common {\n    requestName = \"Reset\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n            ResetEnumType: {\n                description: \"This contains the type of reset that the Charging Station or EVSE should perform.\",\n                type: \"string\",\n                enum: [\"Immediate\", \"OnIdle\"]\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            type: {\n                $ref: \"#/definitions/ResetEnumType\"\n            },\n            evseId: {\n                description: \"This contains the ID of a specific EVSE that needs to be reset, instead of the entire Charging Station.\",\n                type: \"integer\"\n            }\n        },\n        required: [\"type\"]\n    }\n}\n\nexport default Reset;","import _common from './_common';\nimport axios from \"axios\";\nimport {IP_AND_PORT} from \"../../config\";\n\nclass SendLocalList extends _common {\n    requestName = \"SendLocalList\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n            AuthorizationStatusEnumType: {\n                description: \"Current status of the ID Token.\",\n                type: \"string\",\n                enum: [\"Accepted\", \"Blocked\", \"ConcurrentTx\", \"Expired\", \"Invalid\", \"NoCredit\", \"NotAllowedTypeEVSE\",\n                    \"NotAtThisLocation\", \"NotAtThisTime\", \"Unknown\"]\n            },\n            IdTokenEnumType: {\n                description: \"Enumeration of possible idToken types.\",\n                type: \"string\",\n                enum: [\"Central\", \"eMAID\", \"ISO14443\", \"ISO15693\", \"KeyCode\", \"Local\", \"MacAddress\", \"NoAuthorization\"]\n            },\n            MessageFormatEnumType: {\n                description: \"Format of the message.\",\n                type: \"string\",\n                enum: [\"ASCII\", \"HTML\", \"URI\", \"UTF8\"]\n            },\n            UpdateEnumType: {\n                description: \"This contains the type of update (full or differential) of this request.\",\n                type: \"string\",\n                enum: [\"Differential\", \"Full\"]\n            },\n            AdditionalInfoType: {\n                description: \"Contains a case insensitive identifier to use for the authorization and the type of authorization to support multiple forms of identifiers.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    additionalIdToken: {\n                        description: \"This field specifies the additional IdToken.\\r\\n\",\n                        type: \"string\",\n                        maxLength: 36\n                    },\n                    type: {\n                        description: \"This defines the type of the additionalIdToken. This is a custom type, so the implementation needs to be agreed upon by all involved parties.\\r\\n\",\n                        type: \"string\",\n                        maxLength: 50\n                    }\n                },\n                required: [\"additionalIdToken\", \"type\"]\n            },\n            AuthorizationData: {\n                description: \"Contains the identifier to use for authorization.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    idToken: {\n                        $ref: \"#/definitions/IdTokenType\"\n                    },\n                    idTokenInfo: {\n                        $ref: \"#/definitions/IdTokenInfoType\"\n                    }\n                },\n                required: [\"idToken\"]\n            },\n            IdTokenInfoType: {\n                description: \"Contains status information about an identifier.\\r\\nIt is advised to not stop charging for a token that expires during charging, as ExpiryDate is only used for caching purposes. If ExpiryDate is not given, the status has no end date.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    status: {\n                        $ref: \"#/definitions/AuthorizationStatusEnumType\"\n                    },\n                    cacheExpiryDateTime: {\n                        description: \"Date and Time after which the token must be considered invalid.\",\n                        type: \"string\",\n                        format: \"date-time\"\n                    },\n                    chargingPriority: {\n                        description: \"Priority from a business point of view. Default priority is 0, The range is from -9 to 9. Higher values indicate a higher priority. The chargingPriority in <<TransactionEventResponse>> overrules this one. \",\n                        type: \"integer\",\n                        minimum: -9,\n                        maximum: 9\n                    },\n                    language1: {\n                        description: \"Preferred user interface language of identifier user. Contains a language code as defined in <<ref-RFC5646,[RFC5646]>>.\",\n                        type: \"string\",\n                        maxLength: 8\n                    },\n                    evseId: {\n                        description: \"Only used when the IdToken is only valid for one or more specific EVSEs, not for the entire Charging Station.\",\n                        type: \"array\",\n                        items: {\n                            type: \"integer\"\n                        },\n                        minItems: 1\n                    },\n                    groupIdToken: {\n                        $ref: \"#/definitions/IdTokenType\"\n                    },\n                    language2: {\n                        description: \"Second preferred user interface language of identifier user. Don’t use when language1 is omitted, has to be different from language1. Contains a language code as defined in <<ref-RFC5646,[RFC5646]>>.\\r\\n\",\n                        type: \"string\",\n                        maxLength: 8\n                    },\n                    personalMessage: {\n                        $ref: \"#/definitions/MessageContentType\"\n                    }\n                },\n                required: [\"status\"]\n            },\n            IdTokenType: {\n                description: \"Contains a case insensitive identifier to use for the authorization and the type of authorization to support multiple forms of identifiers.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    additionalInfo: {\n                        type: \"array\",\n                        items: {\n                            $ref: \"#/definitions/AdditionalInfoType\"\n                        },\n                        minItems: 1\n                    },\n                    idToken: {\n                        description: \"IdToken is case insensitive. Might hold the hidden id of an RFID tag, but can for example also contain a UUID.\",\n                        type: \"string\",\n                        maxLength: 36\n                    },\n                    type: {\n                        $ref: \"#/definitions/IdTokenEnumType\"\n                    }\n                },\n                required: [\"idToken\", \"type\"]\n            },\n            MessageContentType: {\n                description: \"Contains message details, for a message to be displayed on a Charging Station.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    format: {\n                        $ref: \"#/definitions/MessageFormatEnumType\"\n                    },\n                    language: {\n                        description: \"Message language identifier. Contains a language code as defined in <<ref-RFC5646,[RFC5646]>>.\",\n                        type: \"string\",\n                        maxLength: 8\n                    },\n                    content: {\n                        description: \"Message contents.\",\n                        type: \"string\",\n                        maxLength: 512\n                    }\n                },\n                required: [\"format\", \"content\"]\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            localAuthorizationList: {\n                type: \"array\",\n                items: {\n                    $ref: \"#/definitions/AuthorizationData\"\n                },\n                minItems: 1\n            },\n            versionNumber: {\n                description: \"In case of a full update this is the version number of the full list. In case of a differential update it is the version number of the list after the update has been applied.\",\n                type: \"integer\"\n            },\n            updateType: {\n                $ref: \"#/definitions/UpdateEnumType\"\n            }\n        }\n    }\n\n    validate = (formData, errors) => {\n        let json = null;\n        if (formData.hasOwnProperty(\"customData\")) {\n            if (formData.customData.hasOwnProperty(\"jsonString\")) {\n                if (formData.customData.jsonString.length > 0) {\n                    try {\n                        json = JSON.parse(formData.customData.jsonString);\n                        if(!json.hasOwnProperty(\"vendorId\")){\n                            errors.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                        }\n                    } catch {\n                        errors.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                    }\n                }\n            }\n        }\n        formData.localAuthorizationList.forEach((val_i, i) => {\n            if (val_i.customData.jsonString.length > 0) {\n                try {\n                    json = JSON.parse(val_i.customData.jsonString);\n                    if(!json.hasOwnProperty(\"vendorId\")){\n                        errors.localAuthorizationList[i].customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                    }\n                } catch {\n                    errors.localAuthorizationList[i].customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                }\n            }\n            if (val_i.idToken.customData.jsonString.length > 0) {\n                try {\n                    json = JSON.parse(val_i.idToken.customData.jsonString);\n                    if(!json.hasOwnProperty(\"vendorId\")){\n                        errors.localAuthorizationList[i].idToken.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                    }\n                } catch {\n                    errors.localAuthorizationList[i].idToken.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                }\n            }\n            val_i.idToken.additionalInfo.forEach((val_j, j) => {\n                if (val_j.customData.jsonString.length > 0) {\n                    try {\n                        json = JSON.parse(val_j.customData.jsonString);\n                        if(!json.hasOwnProperty(\"vendorId\")){\n                            errors.localAuthorizationList[i].idToken.additionalInfo[j].customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                        }\n                    } catch {\n                        errors.localAuthorizationList[i].idToken.additionalInfo[j].customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                    }\n                }\n            });\n            if (val_i.idTokenInfo.customData.jsonString.length > 0) {\n                try {\n                    json = JSON.parse(val_i.idTokenInfo.customData.jsonString);\n                    if(!json.hasOwnProperty(\"vendorId\")){\n                        errors.localAuthorizationList[i].idTokenInfo.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                    }\n                } catch {\n                    errors.localAuthorizationList[i].idTokenInfo.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                }\n            }\n            if (val_i.idTokenInfo.groupIdToken.customData.jsonString.length > 0) {\n                try {\n                    json = JSON.parse(val_i.idTokenInfo.groupIdToken.customData.jsonString);\n                    if(!json.hasOwnProperty(\"vendorId\")){\n                        errors.localAuthorizationList[i].idTokenInfo.groupIdToken.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                    }\n                } catch {\n                    errors.localAuthorizationList[i].idTokenInfo.groupIdToken.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                }\n            }\n            val_i.idTokenInfo.groupIdToken.additionalInfo.forEach((val_j, j) => {\n                if (val_j.customData.jsonString.length > 0) {\n                    try {\n                        json = JSON.parse(val_j.customData.jsonString);\n                        if(!json.hasOwnProperty(\"vendorId\")){\n                            errors.localAuthorizationList[i].idTokenInfo.groupIdToken.additionalInfo[j].customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                        }\n                    } catch {\n                        errors.localAuthorizationList[i].idTokenInfo.groupIdToken.additionalInfo[j].customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                    }\n                }\n            });\n            if (val_i.idTokenInfo.personalMessage.customData.jsonString.length > 0) {\n                try {\n                    json = JSON.parse(val_i.idTokenInfo.personalMessage.customData.jsonString);\n                    if(!json.hasOwnProperty(\"vendorId\")){\n                        errors.localAuthorizationList[i].idTokenInfo.personalMessage.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                    }\n                } catch {\n                    errors.localAuthorizationList[i].idTokenInfo.personalMessage.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                }\n            }\n        });\n        return errors;\n    }\n\n    onSubmit = async ({formData}) => {\n        formData = this.formatCustomData(formData);\n        formData.localAuthorizationList.forEach((value_i, index_i) => {\n            formData.localAuthorizationList[index_i] = this.formatCustomData(value_i);\n            formData.localAuthorizationList[index_i].idToken = this.formatCustomData(value_i.idToken);\n            formData.localAuthorizationList[index_i].idToken.additionalInfo.forEach((value_j, index_j) => {\n                formData.localAuthorizationList[index_i].idToken.additionalInfo[index_j] = this.formatCustomData(value_j);\n            });\n            formData.localAuthorizationList[index_i].idTokenInfo = this.formatCustomData(value_i.idTokenInfo);\n            formData.localAuthorizationList[index_i].idTokenInfo.groupIdToken = this.formatCustomData(value_i.idTokenInfo.groupIdToken);\n            formData.localAuthorizationList[index_i].idTokenInfo.groupIdToken.additionalInfo.forEach((value_j, index_j) => {\n                formData.localAuthorizationList[index_i].idTokenInfo.groupIdToken.additionalInfo[index_j] = this.formatCustomData(value_j);\n            });\n            formData.localAuthorizationList[index_i].idTokenInfo.personalMessage = this.formatCustomData(value_i.idTokenInfo.personalMessage);\n        });\n        const json = this.formatData(formData);\n        window.alert(json);\n        await axios.post(`http://${IP_AND_PORT}/api/post-request`,\n             json, {headers: {'Content-Type': 'application/json'}});\n    }\n}\n\nexport default SendLocalList;","import _common from './_common';\nimport axios from \"axios\";\nimport {IP_AND_PORT} from \"../../config\";\n\nclass SetChargingProfile extends _common {\n    requestName = \"SetChargingProfile\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n            ChargingProfileKindEnumType: {\n                description: \"Indicates the kind of schedule.\",\n                type: \"string\",\n                enum: [\"Absolute\", \"Recurring\", \"Relative\"]\n            },\n            ChargingProfilePurposeEnumType: {\n                description: \"Defines the purpose of the schedule transferred by this profile\",\n                type: \"string\",\n                enum: [\"ChargingStationExternalConstraints\", \"ChargingStationMaxProfile\", \"TxDefaultProfile\",\n                    \"TxProfile\"]\n            },\n            ChargingRateUnitEnumType: {\n                description: \"The unit of measure Limit is expressed in.\",\n                type: \"string\",\n                enum: [\"W\", \"A\"]\n            },\n            CostKindEnumType: {\n                description: \"The kind of cost referred to in the message element amount\",\n                type: \"string\",\n                enum: [\"CarbonDioxideEmission\", \"RelativePricePercentage\", \"RenewableGenerationPercentage\"]\n            },\n            RecurrencyKindEnumType: {\n                description: \"Indicates the start point of a recurrence.\",\n                type: \"string\",\n                enum: [\"Daily\", \"Weekly\"]\n            },\n            ChargingProfileType: {\n                description: \"A ChargingProfile consists of ChargingSchedule, describing the amount of power or \" +\n                    \"current that can be delivered per time interval.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    id: {\n                        description: \"Id of ChargingProfile.\",\n                        type: \"integer\"\n                    },\n                    stackLevel: {\n                        description: \"Value determining level in hierarchy stack of profiles. Higher values have \" +\n                            \"precedence over lower values. Lowest level is 0.\",\n                        type: \"integer\"\n                    },\n                    chargingProfilePurpose: {\n                        $ref: \"#/definitions/ChargingProfilePurposeEnumType\"\n                    },\n                    chargingProfileKind: {\n                        $ref: \"#/definitions/ChargingProfileKindEnumType\"\n                    },\n                    recurrencyKind: {\n                        $ref: \"#/definitions/RecurrencyKindEnumType\"\n                    },\n                    validFrom: {\n                        description: \"Point in time at which the profile starts to be valid. If absent, the profile \" +\n                            \"is valid as soon as it is received by the Charging Station.\",\n                        type: \"string\",\n                        format: \"date-time\"\n                    },\n                    validTo: {\n                        description: \"Point in time at which the profile stops to be valid. If absent, the profile \" +\n                            \"is valid until it is replaced by another profile.\",\n                        type: \"string\",\n                        format: \"date-time\"\n                    },\n                    chargingSchedule: {\n                        type: \"array\",\n                        items: {\n                            $ref: \"#/definitions/ChargingScheduleType\"\n                        },\n                        minItems: 1,\n                        maxItems: 3\n                    },\n                    transactionId: {\n                        description: \"SHALL only be included if ChargingProfilePurpose is set to TxProfile. The \" +\n                            \"transactionId is used to match the profile to a specific transaction.\",\n                        type: \"string\",\n                        maxLength: 36\n                    }\n                },\n                required: [\"id\", \"stackLevel\", \"chargingProfilePurpose\", \"chargingProfileKind\", \"chargingSchedule\"]\n            },\n            ChargingSchedulePeriodType: {\n                description: \"Charging schedule period structure defines a time period in a charging schedule.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    startPeriod: {\n                        description: \"Start of the period, in seconds from the start of schedule. The value of \" +\n                            \"StartPeriod also defines the stop time of the previous period.\",\n                        type: \"integer\"\n                    },\n                    limit: {\n                        description: \"Charging rate limit during the schedule period, in the applicable \" +\n                            \"chargingRateUnit, for example in Amperes (A) or Watts (W). Accepts at most one digit \" +\n                            \"fraction (e.g. 8.1).\",\n                        type: \"number\"\n                    },\n                    numberPhases: {\n                        description: \"The number of phases that can be used for charging. If a number of phases is \" +\n                            \"needed, numberPhases=3 will be assumed unless another number is given.\\r\\n\",\n                        type: \"integer\"\n                    },\n                    phaseToUse: {\n                        description: \"Values: 1..3, Used if numberPhases=1 and if the EVSE is capable of switching \" +\n                            \"the phase connected to the EV, i.e. ACPhaseSwitchingSupported is defined and true. \" +\n                            \"It's not allowed unless both conditions above are true. If both conditions are true, \" +\n                            \"and phaseToUse is omitted, the Charging Station / EVSE will make the selection on its own.\",\n                        type: \"integer\"\n                    }\n                },\n                required: [\"startPeriod\", \"limit\"]\n            },\n            ChargingScheduleType: {\n                description: \"Charging schedule structure defines a list of charging periods, as used in: \" +\n                    \"GetCompositeSchedule.conf and ChargingProfile.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    id: {\n                        description: \"Identifies the ChargingSchedule.\",\n                        type: \"integer\"\n                    },\n                    startSchedule: {\n                        description: \"Starting point of an absolute schedule. If absent the schedule will be \" +\n                            \"relative to start of charging.\",\n                        type: \"string\",\n                        format: \"date-time\"\n                    },\n                    duration: {\n                        description: \"Duration of the charging schedule in seconds. If the duration is left empty, \" +\n                            \"the last period will continue indefinitely or until end of the transaction if \" +\n                            \"chargingProfilePurpose = TxProfile.\",\n                        type: \"integer\"\n                    },\n                    chargingRateUnit: {\n                        $ref: \"#/definitions/ChargingRateUnitEnumType\"\n                    },\n                    chargingSchedulePeriod: {\n                        type: \"array\",\n                        items: {\n                            $ref: \"#/definitions/ChargingSchedulePeriodType\"\n                        },\n                        minItems: 1,\n                        maxItems: 1024\n                    },\n                    minChargingRate: {\n                        description: \"Minimum charging rate supported by the EV. The unit of measure is defined \" +\n                            \"by the chargingRateUnit. This parameter is intended to be used by a local smart \" +\n                            \"charging algorithm to optimize the power allocation for in the case a charging process \" +\n                            \"is inefficient at lower charging rates. Accepts at most one digit fraction (e.g. 8.1)\",\n                        type: \"number\"\n                    },\n                    salesTariff: {\n                        $ref: \"#/definitions/SalesTariffType\"\n                    }\n                },\n                required: [\"id\", \"chargingRateUnit\", \"chargingSchedulePeriod\"]\n            },\n            ConsumptionCostType: {\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    startValue: {\n                        description: \"The lowest level of consumption that defines the starting point of this \" +\n                            \"consumption block. The block interval extends to the start of the next interval.\",\n                        type: \"number\"\n                    },\n                    cost: {\n                        type: \"array\",\n                        items: {\n                            $ref: \"#/definitions/CostType\"\n                        },\n                        minItems: 1,\n                        maxItems: 3\n                    }\n                },\n                required: [\"startValue\", \"cost\"]\n            },\n            CostType: {\n                description: \"Cost\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    costKind: {\n                        $ref: \"#/definitions/CostKindEnumType\"\n                    },\n                    amount: {\n                        description: \"The estimated or actual cost per kWh\",\n                        type: \"integer\"\n                    },\n                    amountMultiplier: {\n                        description: \"Values: -3..3, The amountMultiplier defines the exponent to base 10 (dec). \" +\n                            \"The final value is determined by: amount * 10 ^ amountMultiplier\",\n                        type: \"integer\"\n                    }\n                },\n                required: [\"costKind\", \"amount\"]\n            },\n            RelativeTimeIntervalType: {\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    start: {\n                        description: \"Start of the interval, in seconds from NOW.\",\n                        type: \"integer\"\n                    },\n                    duration: {\n                        description: \"Duration of the interval, in seconds.\",\n                        type: \"integer\"\n                    }\n                },\n                required: [\"start\"]\n            },\n            SalesTariffEntryType: {\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    relativeTimeInterval: {\n                        $ref: \"#/definitions/RelativeTimeIntervalType\"\n                    },\n                    ePriceLevel: {\n                        description: \"Defines the price level of this SalesTariffEntry (referring to NumEPriceLevels). \" +\n                            \"Small values for the EPriceLevel represent a cheaper TariffEntry. Large values for the \" +\n                            \"EPriceLevel represent a more expensive TariffEntry.\",\n                        type: \"integer\",\n                        minimum: 0.0\n                    },\n                    consumptionCost: {\n                        type: \"array\",\n                        items: {\n                            $ref: \"#/definitions/ConsumptionCostType\"\n                        },\n                        minItems: 1,\n                        maxItems: 3\n                    }\n                },\n                required: [\"relativeTimeInterval\"]\n            },\n            SalesTariffType: {\n                description: \"NOTE: This dataType is based on dataTypes from <<ref-ISOIEC15118-2,ISO 15118-2>>.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    id: {\n                        description: \"SalesTariff identifier used to identify one sales tariff. An SAID remains a \" +\n                            \"unique identifier for one schedule throughout a charging session.\",\n                        type: \"integer\"\n                    },\n                    salesTariffDescription: {\n                        description: \"A human readable title/short description of the sales tariff e.g. for HMI display purposes.\",\n                        type: \"string\",\n                        maxLength: 32\n                    },\n                    numEPriceLevels: {\n                        description: \"Defines the overall number of distinct price levels used across all provided \" +\n                            \"SalesTariff elements.\\r\\n\",\n                        type: \"integer\"\n                    },\n                    salesTariffEntry: {\n                        type: \"array\",\n                        items: {\n                            $ref: \"#/definitions/SalesTariffEntryType\"\n                        },\n                        minItems: 1,\n                        maxItems: 1024\n                    }\n                },\n                required: [\"id\", \"salesTariffEntry\"]\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            evseId: {\n                description: \"For TxDefaultProfile an evseId=0 applies the profile to each individual evse. \" +\n                    \"For ChargingStationMaxProfile and ChargingStationExternalConstraints an evseId=0 contains an \" +\n                    \"overall limit for the whole Charging Station.\",\n                type: \"integer\"\n            },\n            chargingProfile: {\n                $ref: \"#/definitions/ChargingProfileType\"\n            }\n        }\n    }\n\n    validate = (formData, errors) => {\n        let json = null;\n        if (formData.customData.jsonString.length > 0) {\n            try {\n                json = JSON.parse(formData.customData.jsonString);\n                if(!json.hasOwnProperty(\"vendorId\")){\n                    errors.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                }\n            } catch {\n                errors.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n            }\n        }\n        if (formData.chargingProfile.customData.jsonString.length > 0) {\n            try {\n                json = JSON.parse(formData.chargingProfile.customData.jsonString);\n                if(!json.hasOwnProperty(\"vendorId\")){\n                    errors.chargingProfile.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                }\n            } catch {\n                errors.chargingProfile.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n            }\n        }\n        formData.chargingProfile.chargingSchedule.forEach((value_a, index_a) => {\n            if (value_a.customData.jsonString.length > 0) {\n                try {\n                    json = JSON.parse(value_a.customData.jsonString);\n                    if(!json.hasOwnProperty(\"vendorId\")){\n                        errors.chargingProfile.chargingSchedule[index_a].customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                    }\n                } catch {\n                    errors.chargingProfile.chargingSchedule[index_a].customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                }\n            }\n            value_a.chargingSchedulePeriod.forEach((value_b, index_b) => {\n                if (value_b.customData.jsonString.length > 0) {\n                    try {\n                        json = JSON.parse(value_b.customData.jsonString);\n                        if(!json.hasOwnProperty(\"vendorId\")){\n                            errors.chargingProfile.chargingSchedule[index_a].chargingSchedulePeriod[index_b].customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                        }\n                    } catch {\n                        errors.chargingProfile.chargingSchedule[index_a].chargingSchedulePeriod[index_b].customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                    }\n                }\n            });\n            if (value_a.salesTariff.customData.jsonString.length > 0) {\n                try {\n                    json = JSON.parse(value_a.salesTariff.customData.jsonString);\n                    if(!json.hasOwnProperty(\"vendorId\")){\n                        errors.chargingProfile.chargingSchedule[index_a].salesTariff.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                    }\n                } catch {\n                    errors.chargingProfile.chargingSchedule[index_a].salesTariff.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                }\n            }\n            value_a.salesTariff.salesTariffEntry.forEach((value_b, index_b) => {\n                if (value_b.customData.jsonString.length > 0) {\n                    try {\n                        json = JSON.parse(value_b.customData.jsonString);\n                        if(!json.hasOwnProperty(\"vendorId\")){\n                            errors.chargingProfile.chargingSchedule[index_a].salesTariff.salesTariffEntry[index_b].customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                        }\n                    } catch {\n                        errors.chargingProfile.chargingSchedule[index_a].salesTariff.salesTariffEntry[index_b].customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                    }\n                }\n                if (value_b.relativeTimeInterval.customData.jsonString.length > 0) {\n                    try {\n                        json = JSON.parse(value_b.relativeTimeInterval.customData.jsonString);\n                        if(!json.hasOwnProperty(\"vendorId\")){\n                            errors.chargingProfile.chargingSchedule[index_a].salesTariff.salesTariffEntry[index_b].relativeTimeInterval.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                        }\n                    } catch {\n                        errors.chargingProfile.chargingSchedule[index_a].salesTariff.salesTariffEntry[index_b].relativeTimeInterval.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                    }\n                }\n                value_b.consumptionCost.forEach((value_c, index_c) => {\n                    if (value_c.customData.jsonString.length > 0) {\n                        try {\n                            json = JSON.parse(value_c.customData.jsonString);\n                            if(!json.hasOwnProperty(\"vendorId\")){\n                                errors.chargingProfile.chargingSchedule[index_a].salesTariff.salesTariffEntry[index_b].consumptionCost[index_c].customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                            }\n                        } catch {\n                            errors.chargingProfile.chargingSchedule[index_a].salesTariff.salesTariffEntry[index_b].consumptionCost[index_c].customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                        }\n                    }\n                    value_c.cost.forEach((value_d, index_d) => {\n                        if (value_d.customData.jsonString.length > 0) {\n                            try {\n                                json = JSON.parse(value_d.customData.jsonString);\n                                if(!json.hasOwnProperty(\"vendorId\")){\n                                    errors.chargingProfile.chargingSchedule[index_a].salesTariff.salesTariffEntry[index_b].consumptionCost[index_c].cost[index_d].customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                                }\n                            } catch {\n                                errors.chargingProfile.chargingSchedule[index_a].salesTariff.salesTariffEntry[index_b].consumptionCost[index_c].cost[index_d].customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                            }\n                        }\n                    });\n                });\n            });\n        });\n        return errors;\n    }\n\n    onSubmit = async ({formData}) => {\n        formData = this.formatCustomData(formData);\n        formData.chargingProfile = this.formatCustomData(formData.chargingProfile);\n        formData.chargingProfile.chargingSchedule.forEach((value_a, index_a) => {\n            formData.chargingProfile.chargingSchedule[index_a] = this.formatCustomData(value_a);\n            formData.chargingProfile.chargingSchedule[index_a].chargingSchedulePeriod.forEach((value_b, index_b) => {\n                formData.chargingProfile.chargingSchedule[index_a].chargingSchedulePeriod[index_b] = this.formatCustomData(value_b);\n            });\n            formData.chargingProfile.chargingSchedule[index_a].salesTariff = this.formatCustomData(value_a.salesTariff);\n            formData.chargingProfile.chargingSchedule[index_a].salesTariff.salesTariffEntry.forEach((value_b, index_b) => {\n                formData.chargingProfile.chargingSchedule[index_a].salesTariff.salesTariffEntry[index_b] = this.formatCustomData(value_b);\n                formData.chargingProfile.chargingSchedule[index_a].salesTariff.salesTariffEntry[index_b].relativeTimeInterval = this.formatCustomData(value_b.relativeTimeInterval);\n                formData.chargingProfile.chargingSchedule[index_a].salesTariff.salesTariffEntry[index_b].consumptionCost.forEach((value_c, index_c) => {\n                    formData.chargingProfile.chargingSchedule[index_a].salesTariff.salesTariffEntry[index_b].consumptionCost[index_c] = this.formatCustomData(value_c);\n                    formData.chargingProfile.chargingSchedule[index_a].salesTariff.salesTariffEntry[index_b].consumptionCost[index_c].cost.forEach((value_d, index_d) => {\n                        formData.chargingProfile.chargingSchedule[index_a].salesTariff.salesTariffEntry[index_b].consumptionCost[index_c].cost[index_d] = this.formatCustomData(value_d);\n                    });\n                })\n            });\n        });\n        const json = this.formatData(formData);\n        window.alert(json);\n        await axios.post(`http://${IP_AND_PORT}/api/post-request`,\n             json, {headers: {'Content-Type': 'application/json'}});\n    }\n}\n\nexport default SetChargingProfile;","import _common from './_common';\nimport axios from \"axios\";\nimport {IP_AND_PORT} from \"../../config\";\n\nclass SetDisplayMessage extends _common {\n    requestName = \"SetDisplayMessage\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n            MessageFormatEnumType: {\n                description: \"Format of the message.\",\n                type: \"string\",\n                enum: [\"ASCII\", \"HTML\", \"URI\", \"UTF8\"]\n            },\n            MessagePriorityEnumType: {\n                description: \"With what priority should this message be shown\",\n                type: \"string\",\n                enum: [\"AlwaysFront\", \"InFront\", \"NormalCycle\"]\n            },\n            MessageStateEnumType: {\n                description: \"During what state should this message be shown. When omitted this message should be \" +\n                    \"shown in any state of the Charging Station.\",\n                type: \"string\",\n                enum: [\"Charging\", \"Faulted\", \"Idle\", \"Unavailable\"]\n            },\n            ComponentType: {\n                description: \"A physical or logical component\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    evse: {\n                        $ref: \"#/definitions/EVSEType\"\n                    },\n                    name: {\n                        description: \"Name of the component. Name should be taken from the list of standardized \" +\n                            \"component names whenever possible. Case Insensitive. strongly advised to use Camel Case.\",\n                        type: \"string\",\n                        maxLength: 50\n                    },\n                    instance: {\n                        description: \"Name of instance in case the component exists as multiple instances. Case \" +\n                            \"Insensitive. strongly advised to use Camel Case.\\r\\n\",\n                        type: \"string\",\n                        maxLength: 50\n                    }\n                },\n                required: [\"name\"]\n            },\n            EVSEType: {\n                description: \"Electric Vehicle Supply Equipment\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    id: {\n                        description: \"EVSE Identifier. This contains a number > 0 designating an EVSE of the \" +\n                            \"Charging Station.\",\n                        type: \"integer\"\n                    },\n                    connectorId: {\n                        description: \"An id to designate a specific connector (on an EVSE) by connector index number.\",\n                        type: \"integer\"\n                    }\n                },\n                required: [\"id\"]\n            },\n            MessageContentType: {\n                description: \"Contains message details, for a message to be displayed on a Charging Station.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    format: {\n                        $ref: \"#/definitions/MessageFormatEnumType\"\n                    },\n                    language: {\n                        description: \"Message language identifier. Contains a language code as defined in \" +\n                            \"<<ref-RFC5646,[RFC5646]>>.\",\n                        type: \"string\",\n                        maxLength: 8\n                    },\n                    content: {\n                        description: \"Message contents.\",\n                        type: \"string\",\n                        maxLength: 512\n                    }\n                },\n                required: [\"format\", \"content\"]\n            },\n            MessageInfoType: {\n                description: \"Contains message details, for a message to be displayed on a Charging Station.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    display: {\n                        $ref: \"#/definitions/ComponentType\"\n                    },\n                    id: {\n                        description: \"Master resource identifier, unique within an exchange context. It is defined \" +\n                            \"within the OCPP context as a positive Integer value (greater or equal to zero).\",\n                        type: \"integer\"\n                    },\n                    priority: {\n                        $ref: \"#/definitions/MessagePriorityEnumType\"\n                    },\n                    state: {\n                        $ref: \"#/definitions/MessageStateEnumType\"\n                    },\n                    startDateTime: {\n                        description: \"From what date-time should this message be shown. If omitted: directly.\",\n                        type: \"string\",\n                        format: \"date-time\"\n                    },\n                    endDateTime: {\n                        description: \"Until what date-time should this message be shown, after this date/time this \" +\n                            \"message SHALL be removed.\",\n                        type: \"string\",\n                        format: \"date-time\"\n                    },\n                    transactionId: {\n                        description: \"During which transaction shall this message be shown.\\r\\nMessage SHALL be \" +\n                            \"removed by the Charging Station after transaction has\\r\\nended.\",\n                        type: \"string\",\n                        maxLength: 36\n                    },\n                    message: {\n                        $ref: \"#/definitions/MessageContentType\"\n                    }\n                },\n                required: [\"id\", \"priority\", \"message\"]\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            message: {\n                $ref: \"#/definitions/MessageInfoType\"\n            }\n        },\n        required: [\"message\"]\n    }\n\n    validate = (formData, errors) => {\n        let json = null;\n        if (formData.customData.jsonString.length > 0) {\n            try {\n                json = JSON.parse(formData.customData.jsonString);\n                if(!json.hasOwnProperty(\"vendorId\")){\n                    errors.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                }\n            } catch {\n                errors.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n            }\n        }\n        if (formData.message.customData.jsonString.length > 0) {\n            try {\n                json = JSON.parse(formData.message.customData.jsonString);\n                if(!json.hasOwnProperty(\"vendorId\")){\n                    errors.message.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                }\n            } catch {\n                errors.message.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n            }\n        }\n        if (formData.message.message.customData.jsonString.length > 0) {\n            try {\n                json = JSON.parse(formData.message.message.customData.jsonString);\n                if(!json.hasOwnProperty(\"vendorId\")){\n                    errors.message.message.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                }\n            } catch {\n                errors.message.message.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n            }\n        }\n        if (formData.message.display.customData.jsonString.length > 0) {\n            try {\n                json = JSON.parse(formData.message.display.customData.jsonString);\n                if(!json.hasOwnProperty(\"vendorId\")){\n                    errors.message.display.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                }\n            } catch {\n                errors.message.display.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n            }\n        }\n        if (formData.message.display.evse.customData.jsonString.length > 0) {\n            try {\n                json = JSON.parse(formData.message.display.evse.customData.jsonString);\n                if(!json.hasOwnProperty(\"vendorId\")){\n                    errors.message.display.evse.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                }\n            } catch {\n                errors.message.display.evse.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n            }\n        }\n        return errors;\n    }\n\n    onSubmit = async ({formData}) => {\n        formData = this.formatCustomData(formData);\n        formData.message = this.formatCustomData(formData.message);\n        formData.message.message = this.formatCustomData(formData.message.message);\n        formData.message.display = this.formatCustomData(formData.message.display);\n        formData.message.display.evse = this.formatCustomData(formData.message.display.evse);\n        const json = this.formatData(formData);\n        window.alert(json);\n        await axios.post(`http://${IP_AND_PORT}/api/post-request`,\n             json, {headers: {'Content-Type': 'application/json'}});\n    }\n}\n\nexport default SetDisplayMessage;","import _common from './_common';\n\nclass SetMonitoringBase extends _common {\n    requestName = \"SetMonitoringBase\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n            MonitoringBaseEnumType: {\n                description: \"Specify which monitoring base will be set\",\n                type: \"string\",\n                enum: [\"All\", \"FactoryDefault\", \"HardWiredOnly\"]\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            monitoringBase: {\n                $ref: \"#/definitions/MonitoringBaseEnumType\"\n            }\n        },\n        required: [\"monitoringBase\"]\n    }\n}\n\nexport default SetMonitoringBase;","import _common from './_common';\n\nclass SetMonitoringLevel extends _common {\n    requestName = \"SetMonitoringLevel\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            severity: {\n                description: \"The Charging Station SHALL only report events with a severity number lower than or equal to this severity.\" +\n                    \"\\r\\nThe severity range is 0-9, with 0 as the highest and 9 as the lowest severity level.\" +\n                    \"\\r\\n\\r\\nThe severity levels have the following meaning: \" +\n                    \"+\\r\\n*0-Danger* +\\r\\nIndicates lives are potentially in danger. Urgent attention is needed and action should be taken immediately. \" +\n                    \"+\\r\\n*1-Hardware Failure* +\\r\\nIndicates that the Charging Station is unable to continue regular operations due to Hardware issues. Action is required. \" +\n                    \"+\\r\\n*2-System Failure* +\\r\\nIndicates that the Charging Station is unable to continue regular operations due to software or minor hardware issues. Action is required. +\\r\\n*3-Critical* +\\r\\nIndicates a critical error. Action is required. +\\r\\n*4-Error* +\\r\\nIndicates a non-urgent error. Action is required. +\\r\\n*5-Alert* +\\r\\nIndicates an alert event. Default severity for any type of monitoring event.  +\\r\\n*6-Warning* +\\r\\nIndicates a warning event. Action may be required. +\\r\\n*7-Notice* +\\r\\nIndicates an unusual event. No immediate action is required. +\\r\\n*8-Informational* +\\r\\nIndicates a regular operational event. May be used for reporting, measuring throughput, etc. No action is required. +\\r\\n*9-Debug* +\\r\\nIndicates information useful to developers for debugging, not useful during operations.\\r\\n\\r\\n\\r\\n\",\n                type: \"integer\"\n            }\n        },\n        required: [\"severity\"]\n    }\n}\n\nexport default SetMonitoringLevel;","import _common from './_common';\nimport axios from \"axios\";\nimport {IP_AND_PORT} from \"../../config\";\n\nclass SetNetworkProfile extends _common {\n    requestName = \"SetNetworkProfile\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n            APNAuthenticationEnumType: {\n                description: \"APN authentication method.\",\n                type: \"string\",\n                enum: [\"CHAP\", \"NONE\", \"PAP\", \"AUTO\"]\n            },\n            OCPPInterfaceEnumType: {\n                description: \"Applicable Network Interface.\",\n                type: \"string\",\n                enum: [\"Wired0\", \"Wired1\", \"Wired2\", \"Wired3\", \"Wireless0\", \"Wireless1\", \"Wireless2\", \"Wireless3\"]\n            },\n            OCPPTransportEnumType: {\n                description: \"Defines the transport protocol (e.g. SOAP or JSON). Note: SOAP is not supported in OCPP 2.0, but is supported by other versions of OCPP.\",\n                type: \"string\",\n                enum: [\"JSON\", \"SOAP\"]\n            },\n            OCPPVersionEnumType: {\n                description: \"Defines the OCPP version used for this communication function.\",\n                type: \"string\",\n                enum: [\"OCPP12\", \"OCPP15\", \"OCPP16\", \"OCPP20\"]\n            },\n            VPNEnumType: {\n                description: \"Type of VPN\",\n                type: \"string\",\n                enum: [\"IKEv2\", \"IPSec\", \"L2TP\", \"PPTP\"]\n            },\n            APNType: {\n                description: \"Collection of configuration data needed to make a data-connection over a cellular network.\" +\n                    \" NOTE: When asking a GSM modem to dial in, it is possible to specify which mobile operator should \" +\n                    \"be used. This can be done with the mobile country code (MCC) in combination with a mobile network c\" +\n                    \"ode (MNC). Example: If your preferred network is Vodafone Netherlands, the MCC=204 and the MNC=04 \" +\n                    \"which means the key PreferredNetwork = 20404 Some modems allows to specify a preferred network, \" +\n                    \"which means, if this network is not available, a different network is used. If you specify \" +\n                    \"UseOnlyPreferredNetwork and this network is not available, the modem will not dial in.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    apn: {\n                        description: \"The Access Point Name as an URL.\",\n                        type: \"string\",\n                        maxLength: 512\n                    },\n                    apnUserName: {\n                        description: \"APN username.\",\n                        type: \"string\",\n                        maxLength: 20\n                    },\n                    apnPassword: {\n                        description: \"APN Password.\",\n                        type: \"string\",\n                        maxLength: 20\n                    },\n                    simPin: {\n                        description: \"APN. SIM card pin code.\",\n                        type: \"integer\"\n                    },\n                    preferredNetwork: {\n                        description: \"Preferred network, written as MCC and MNC concatenated.\",\n                        type: \"string\",\n                        maxLength: 6\n                    },\n                    useOnlyPreferredNetwork: {\n                        description: \"Default: false. Use only the preferred Network, do not dial in when not available. See Note.\",\n                        type: \"boolean\",\n                        default: false\n                    },\n                    apnAuthentication: {\n                        $ref: \"#/definitions/APNAuthenticationEnumType\"\n                    }\n                },\n                required: [\"apn\", \"apnAuthentication\"]\n            },\n            NetworkConnectionProfileType: {\n                description: \"The NetworkConnectionProfile defines the functional and technical parameters of a communication link.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    apn: {\n                        $ref: \"#/definitions/APNType\"\n                    },\n                    ocppVersion: {\n                        $ref: \"#/definitions/OCPPVersionEnumType\"\n                    },\n                    ocppTransport: {\n                        $ref: \"#/definitions/OCPPTransportEnumType\"\n                    },\n                    ocppCsmsUrl: {\n                        description: \"URL of the CSMS(s) that this Charging Station communicates with.\",\n                        type: \"string\",\n                        maxLength: 512\n                    },\n                    messageTimeout: {\n                        description: \"Duration in seconds before a message send by the Charging Station via this \" +\n                            \"network connection times-out. The best setting depends on the underlying network \" +\n                            \"and response times of the CSMS. \" +\n                            \"If you are looking for a some guideline: use 30 seconds as a starting point.\\r\\n\",\n                        type: \"integer\"\n                    },\n                    securityProfile: {\n                        description: \"This field specifies the security profile used when connecting to the CSMS \" +\n                            \"with this NetworkConnectionProfile.\",\n                        type: \"integer\"\n                    },\n                    ocppInterface: {\n                        $ref: \"#/definitions/OCPPInterfaceEnumType\"\n                    },\n                    vpn: {\n                        $ref: \"#/definitions/VPNType\"\n                    }\n                },\n                required: [\"ocppVersion\", \"ocppTransport\", \"ocppCsmsUrl\", \"messageTimeout\", \"securityProfile\",\n                    \"ocppInterface\"]\n            },\n            VPNType: {\n                description: \"VPN Configuration settings\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    server: {\n                        description: \"VPN Server Address\",\n                        type: \"string\",\n                        maxLength: 512\n                    },\n                    user: {\n                        description: \"VPN User\",\n                        type: \"string\",\n                        maxLength: 20\n                    },\n                    group: {\n                        description: \"VPN group\",\n                        type: \"string\",\n                        maxLength: 20\n                    },\n                    password: {\n                        description: \"VPN Password.\",\n                        type: \"string\",\n                        maxLength: 20\n                    },\n                    key: {\n                        description: \"VPN shared secret\",\n                        type: \"string\",\n                        maxLength: 255\n                    },\n                    type: {\n                        $ref: \"#/definitions/VPNEnumType\"\n                    }\n                },\n                required: [\"server\", \"user\", \"password\", \"key\", \"type\"]\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            configurationSlot: {\n                description: \"Slot in which the configuration should be stored.\",\n                type: \"integer\"\n            },\n            connectionData: {\n                $ref: \"#/definitions/NetworkConnectionProfileType\"\n            }\n        }\n    }\n\n    validate = (formData, errors) => {\n        let json = null;\n        if (formData.customData.jsonString.length > 0) {\n            try {\n                json = JSON.parse(formData.customData.jsonString);\n                if(!json.hasOwnProperty(\"vendorId\")){\n                    errors.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                }\n            } catch (e) {\n                errors.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n            }\n        }\n        if (formData.connectionData.customData.jsonString.length > 0) {\n            try {\n                json = JSON.parse(formData.connectionData.customData.jsonString);\n                if(!json.hasOwnProperty(\"vendorId\")){\n                    errors.connectionData.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                }\n            } catch (e) {\n                errors.connectionData.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n            }\n        }\n        if (formData.connectionData.apn.customData.jsonString.length > 0) {\n            try {\n                json = JSON.parse(formData.connectionData.apn.customData.jsonString);\n                if(!json.hasOwnProperty(\"vendorId\")){\n                    errors.connectionData.apn.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                }\n            } catch (e) {\n                errors.connectionData.apn.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n            }\n        }\n        if (formData.connectionData.vpn.customData.jsonString.length > 0) {\n            try {\n                json = JSON.parse(formData.connectionData.vpn.customData.jsonString);\n                if(!json.hasOwnProperty(\"vendorId\")){\n                    errors.connectionData.vpn.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                }\n            } catch (e) {\n                errors.connectionData.vpn.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n            }\n        }\n        return errors;\n    }\n\n    onSubmit = async ({formData}) => {\n        formData = this.formatCustomData(formData);\n        formData.connectionData = this.formatCustomData(formData.connectionData);\n        formData.connectionData.apn = this.formatCustomData(formData.connectionData.apn);\n        formData.connectionData.vpn = this.formatCustomData(formData.connectionData.vpn);\n        const json = this.formatData(formData);\n        window.alert(json);\n        await axios.post(`http://${IP_AND_PORT}/api/post-request`,\n             json, {headers: {'Content-Type': 'application/json'}});\n    }\n}\n\nexport default SetNetworkProfile;","import _common from './_common';\nimport axios from \"axios\";\nimport {IP_AND_PORT} from \"../../config\";\n\nclass SetVariableMonitoring extends _common {\n     requestName=\"SetVariableMonitoring\";\n     schema={\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n            MonitorEnumType: {\n                description: \"The type of this monitor, e.g. a threshold, delta or periodic monitor.\",\n                type: \"string\",\n                enum: [\"UpperThreshold\", \"LowerThreshold\", \"Delta\", \"Periodic\", \"PeriodicClockAligned\"]\n            },\n            ComponentType: {\n                description: \"A physical or logical component\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    evse: {\n                        $ref: \"#/definitions/EVSEType\"\n                    },\n                    name: {\n                        description: \"Name of the component. Name should be taken from the list of standardized \" +\n                            \"component names whenever possible. Case Insensitive. strongly advised to use Camel Case.\",\n                        type: \"string\",\n                        maxLength: 50\n                    },\n                    instance: {\n                        description: \"Name of instance in case the component exists as multiple instances. Case \" +\n                            \"Insensitive. strongly advised to use Camel Case.\",\n                        type: \"string\",\n                        maxLength: 50\n                    }\n                },\n                required: [\"name\"]\n            },\n            EVSEType: {\n                description: \"Electric Vehicle Supply Equipment\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    id: {\n                        description: \"EVSE Identifier. This contains a number > 0 designating an EVSE of the Charging Station.\",\n                        type: \"integer\"\n                    },\n                    connectorId: {\n                        description: \"An id to designate a specific connector (on an EVSE) by connector index number.\",\n                        type: \"integer\"\n                    }\n                },\n                required: [\"id\"]\n            },\n            SetMonitoringDataType: {\n                description: \"Class to hold parameters of SetVariableMonitoring request.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    id: {\n                        description: \"An id SHALL only be given to replace an existing monitor. The Charging Station \" +\n                            \"handles the generation of id's for new monitors.\",\n                        type: \"integer\"\n                    },\n                    transaction: {\n                        description: \"Monitor only active when a transaction is ongoing on a component relevant \" +\n                            \"to this transaction. Default = false.\",\n                        type: \"boolean\",\n                        default: false\n                    },\n                    value: {\n                        description: \"Value for threshold or delta monitoring. For Periodic or PeriodicClockAligned \" +\n                            \"this is the interval in seconds.\",\n                        type: \"number\"\n                    },\n                    type: {\n                        $ref: \"#/definitions/MonitorEnumType\"\n                    },\n                    severity: {\n                        description: \"The severity that will be assigned to an event that is triggered by this monitor. \" +\n                            \"The severity range is 0-9, with 0 as the highest and 9 as the lowest severity level. \" +\n                            \"The severity levels have the following meaning: +*0-Danger* + Indicates lives are \" +\n                            \"potentially in danger. Urgent attention is needed and action should be taken immediately. \" +\n                            \"+*1-Hardware Failure* + Indicates that the Charging Station is unable to continue \" +\n                            \"regular operations due to Hardware issues. Action is required. \" +\n                            \"+ *2-System Failure* + Indicates that the Charging Station is unable to continue \" +\n                            \"regular operations due to software or minor hardware issues. Action is required. \" +\n                            \"+*3-Critical* + Indicates a critical error. Action is required. \" +\n                            \"+*4-Error* + Indicates a non-urgent error. Action is required. \" +\n                            \"+*5-Alert* + Indicates an alert event. Default severity for any type of monitoring event.  \" +\n                            \"+*6-Warning* + Indicates a warning event. Action may be required. \" +\n                            \"+ *7-Notice* + Indicates an unusual event. No immediate action is required. \" +\n                            \"+ *8-Informational* + Indicates a regular operational event. May be used for reporting, \" +\n                            \"measuring throughput, etc. No action is required. \" +\n                            \"+ *9-Debug* + Indicates information useful to developers for debugging, not useful during operations.\",\n                        type: \"integer\"\n                    },\n                    component: {\n                        $ref: \"#/definitions/ComponentType\"\n                    },\n                    variable: {\n                        \"$ref\": \"#/definitions/VariableType\"\n                    }\n                },\n                required: [\"value\", \"type\", \"severity\", \"component\", \"variable\"]\n            },\n            VariableType: {\n                description: \"Reference key to a component-variable.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    name: {\n                        description: \"Name of the variable. Name should be taken from the list of standardized \" +\n                            \"variable names whenever possible. Case Insensitive. strongly advised to use Camel Case.\",\n                        type: \"string\",\n                        maxLength: 50\n                    },\n                    instance: {\n                        description: \"Name of instance in case the variable exists as multiple instances. \" +\n                            \"Case Insensitive. strongly advised to use Camel Case.\",\n                        type: \"string\",\n                        maxLength: 50\n                    }\n                },\n                required: [\"name\"]\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            setMonitoringData: {\n                type: \"array\",\n                items: {\n                    $ref: \"#/definitions/SetMonitoringDataType\"\n                },\n                minItems: 1\n            }\n        },\n         required: [\"setMonitoringData\"]\n     }\n\n     validate = (formData, errors) => {\n         let json = null;\n         if(formData.customData.jsonString.length > 0){\n             try {\n                 json = JSON.parse(formData.customData.jsonString);\n                 if(!json.hasOwnProperty(\"vendorId\")){\n                     errors.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                 }\n             } catch {\n                 errors.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n             }\n         }\n        formData.setMonitoringData.forEach((value, index) => {\n            if(value.customData.jsonString.length > 0) {\n                try {\n                    json = JSON.parse(value.customData.jsonString);\n                    if(!json.hasOwnProperty(\"vendorId\")){\n                        errors.setMonitoringData[index].customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                    }\n                } catch {\n                    errors.setMonitoringData[index].customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                }\n            }\n            if(value.component.customData.jsonString.length > 0){\n                try {\n                    json = JSON.parse(value.component.customData.jsonString);\n                    if(!json.hasOwnProperty(\"vendorId\")){\n                        errors.setMonitoringData[index].component.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                    }\n                } catch {\n                    errors.setMonitoringData[index].component.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                }\n            }\n            if(value.component.evse.customData.jsonString.length > 0){\n                try {\n                    json = JSON.parse(value.component.evse.customData.jsonString);\n                    if(!json.hasOwnProperty(\"vendorId\")){\n                        errors.setMonitoringData[index].component.evse.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                    }\n                } catch {\n                    errors.setMonitoringData[index].component.evse.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                }\n            }\n            if(value.component.variable.customData.jsonString.length > 0){\n                try {\n                    json = JSON.parse(value.component.variable.customData.jsonString);\n                    if(!json.hasOwnProperty(\"vendorId\")){\n                        errors.setMonitoringData[index].component.variable.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                    }\n                } catch {\n                    errors.setMonitoringData[index].component.variable.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                }\n            }\n        });\n        return errors;\n    }\n\n    onSubmit = async ({formData}) => {\n        formData = this.formatCustomData(formData);\n        formData.setMonitoringData.forEach((value, index) => {\n            formData.setMonitoringData[index] = this.formatCustomData(value);\n            formData.setMonitoringData[index].component = this.formatCustomData(value.component);\n            formData.setMonitoringData[index].component.evse = this.formatCustomData(value.component.evse);\n            formData.setMonitoringData[index].component.variable = this.formatCustomData(value.component.variable);\n        });\n        const json = this.formatData(formData);\n        window.alert(json);\n        await axios.post(`http://${IP_AND_PORT}/api/post-request`,\n             json, {headers: {'Content-Type': 'application/json'}});\n    }\n}\n\nexport default SetVariableMonitoring;","import _common from './_common';\nimport axios from \"axios\";\nimport {IP_AND_PORT} from \"../../config\";\n\nclass SetVariables extends _common {\n    requestName = \"SetVariables\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n            AttributeEnumType: {\n                description: \"Type of attribute: Actual, Target, MinSet, MaxSet. Default is Actual when omitted.\",\n                type: \"string\",\n                default: \"Actual\",\n                enum: [\"Actual\", \"Target\", \"MinSet\", \"MaxSet\"]\n            },\n            ComponentType: {\n                description: \"A physical or logical component\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    evse: {\n                        $ref: \"#/definitions/EVSEType\"\n                    },\n                    name: {\n                        description: \"Name of the component. Name should be taken from the list of standardized \" +\n                            \"component names whenever possible. Case Insensitive. strongly advised to use Camel Case.\",\n                        type: \"string\",\n                        maxLength: 50\n                    },\n                    instance: {\n                        description: \"Name of instance in case the component exists as multiple instances. \" +\n                            \"Case Insensitive. strongly advised to use Camel Case.\",\n                        type: \"string\",\n                        maxLength: 50\n                    }\n                },\n                required: [\"name\"]\n            },\n            EVSEType: {\n                description: \"Electric Vehicle Supply Equipment\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    id: {\n                        description: \"EVSE Identifier. This contains a number > 0 designating an EVSE of the Charging Station.\",\n                        type: \"integer\"\n                    },\n                    connectorId: {\n                        description: \"An id to designate a specific connector (on an EVSE) by connector index number.\",\n                        type: \"integer\"\n                    }\n                },\n                required: [\"id\"]\n            },\n            SetVariableDataType: {\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    attributeType: {\n                        $ref: \"#/definitions/AttributeEnumType\"\n                    },\n                    attributeValue: {\n                        description: \"Value to be assigned to attribute of variable. The Configuration Variable \" +\n                            \"<<configkey-configuration-value-size,ConfigurationValueSize>> can be used to limit \" +\n                            \"SetVariableData.attributeValue and VariableCharacteristics.valueList. The max size of \" +\n                            \"these values will always remain equal. \\r\\n\",\n                        type: \"string\",\n                        maxLength: 1000\n                    },\n                    component: {\n                        $ref: \"#/definitions/ComponentType\"\n                    },\n                    variable: {\n                        $ref: \"#/definitions/VariableType\"\n                    }\n                },\n                required: [\"attributeValue\", \"component\", \"variable\"]\n            },\n            VariableType: {\n                description: \"Reference key to a component-variable.\",\n                javaType: \"Variable\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    name: {\n                        description: \"Name of the variable. Name should be taken from the list of standardized \" +\n                            \"variable names whenever possible. Case Insensitive. strongly advised to use Camel Case.\",\n                        type: \"string\",\n                        maxLength: 50\n                    },\n                    instance: {\n                        description: \"Name of instance in case the variable exists as multiple instances. \" +\n                            \"Case Insensitive. strongly advised to use Camel Case.\",\n                        type: \"string\",\n                        maxLength: 50\n                    }\n                },\n                required: [\"name\"]\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            setVariableData: {\n                type: \"array\",\n                items: {\n                    $ref: \"#/definitions/SetVariableDataType\"\n                },\n                minItems: 1\n            }\n        },\n        required: [\"setVariableData\"]\n    }\n\n    validate = (formData, errors) => {\n        let json = null;\n        if (formData.customData.jsonString.length > 0) {\n            try {\n                json = JSON.parse(formData.customData.jsonString);\n                if(!json.hasOwnProperty(\"vendorId\")){\n                    errors.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                }\n            } catch {\n                errors.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n            }\n        }\n        formData.setVariableData.forEach((value, index) => {\n            if (value.customData.jsonString.length > 0) {\n                try {\n                    json = JSON.parse(value.customData.jsonString);\n                    if(!json.hasOwnProperty(\"vendorId\")){\n                        errors.setVariableData[index].customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                    }\n                } catch {\n                    errors.setVariableData[index].customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                }\n            }\n            if (value.component.customData.jsonString.length > 0){\n                try {\n                    json = JSON.parse(value.component.customData.jsonString);\n                    if(!json.hasOwnProperty(\"vendorId\")){\n                        errors.setVariableData[index].component.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                    }\n                } catch {\n                    errors.setVariableData[index].component.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                }\n            }\n            if (value.component.evse.customData.jsonString.length > 0){\n                try {\n                    json = JSON.parse(value.component.evse.customData.jsonString);\n                    if(!json.hasOwnProperty(\"vendorId\")){\n                        errors.setVariableData[index].component.evse.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                    }\n                } catch {\n                    errors.setVariableData[index].component.evse.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                }\n            }\n            if (value.component.variable.customData.jsonString.length > 0){\n                try {\n                    json = JSON.parse(value.component.variable.customData.jsonString);\n                    if(!json.hasOwnProperty(\"vendorId\")){\n                        errors.setVariableData[index].component.variable.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                    }\n                } catch {\n                    errors.setVariableData[index].component.variable.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n                }\n            }\n        });\n        return errors;\n    }\n\n    onSubmit = async ({formData}) => {\n        formData = this.formatCustomData(formData);\n        formData.setVariableData.forEach((value, index) => {\n            formData.setVariableData[index] = this.formatCustomData(value);\n            formData.setVariableData[index].component = this.formatCustomData(value.component);\n            formData.setVariableData[index].component.evse = this.formatCustomData(value.component.evse);\n            formData.setVariableData[index].component.variable = this.formatCustomData(value.component.variable);\n        });\n        const json = this.formatData(formData);\n        window.alert(json);\n        await axios.post(`http://${IP_AND_PORT}/api/post-request`,\n             json, {headers: {'Content-Type': 'application/json'}});\n    }\n}\n\nexport default SetVariables;","import Common from './_common';\n\nclass SignCertificate extends Common {\n    requestName = \"SignCertificate\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n            CertificateSigningUseEnumType: {\n                description: \"Indicates the type of certificate that is to be signed. When omitted the certificate \" +\n                    \"is to be used for both the 15118 connection (if implemented) and the Charging Station to CSMS connection.\",\n                type: \"string\",\n                enum: [\"ChargingStationCertificate\", \"V2GCertificate\"]\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            csr: {\n                description: \"The Charging Station SHALL send the public key in form of a Certificate Signing Request \" +\n                    \"(CSR) as described in RFC 2986 [22] and then PEM encoded, using the <<SignCertificateRequest>> message.\",\n                type: \"string\",\n                maxLength: 5500\n            },\n            certificateType: {\n                $ref: \"#/definitions/CertificateSigningUseEnumType\"\n            }\n        },\n        required: [\"csr\"]\n    }\n}\n\nexport default SignCertificate;","import Common from './_common';\nimport axios from \"axios\";\nimport {IP_AND_PORT} from \"../../config\";\n\nclass TriggerMessage extends Common {\n    requestName = \"TriggerMessage\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n            MessageTriggerEnumType: {\n                description: \"Type of message to be triggered.\",\n                type: \"string\",\n                enum: [\"BootNotification\", \"LogStatusNotification\", \"FirmwareStatusNotification\",\n                    \"Heartbeat\", \"MeterValues\", \"SignChargingStationCertificate\", \"SignV2GCertificate\",\n                    \"StatusNotification\", \"TransactionEvent\", \"SignCombinedCertificate\",\n                    \"PublishFirmwareStatusNotification\"]\n            },\n            EVSEType: {\n                description: \"Electric Vehicle Supply Equipment\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    id: {\n                        description: \"EVSE Identifier. This contains a number > 0 designating an EVSE of the Charging Station.\",\n                        type: \"integer\"\n                    },\n                    connectorId: {\n                        description: \"An id to designate a specific connector (on an EVSE) by connector index number.\",\n                        type: \"integer\"\n                    }\n                },\n                required: [\"id\"]\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            evse: {\n                $ref: \"#/definitions/EVSEType\"\n            },\n            requestedMessage: {\n                $ref: \"#/definitions/MessageTriggerEnumType\"\n            }\n        },\n        required: [\"requestedMessage\"]\n    }\n\n    validate = (formData, errors) => {\n        let json = null;\n        if (formData.customData.jsonString.length > 0) {\n            try {\n                json = JSON.parse(formData.customData.jsonString);\n                if(!json.hasOwnProperty(\"vendorId\")){\n                    errors.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                }\n            } catch {\n                errors.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n            }\n        }\n        if (formData.evse.customData.jsonString.length > 0) {\n            try {\n                json = JSON.parse(formData.evse.customData.jsonString);\n                if(!json.hasOwnProperty(\"vendorId\")){\n                    errors.evse.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                }\n            } catch {\n                errors.evse.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n            }\n        }\n        return errors;\n    }\n\n    onSubmit = async ({formData}) => {\n        formData = this.formatCustomData(formData);\n        formData.evse = this.formatCustomData(formData.evse);\n        const json = this.formatData(formData);\n        window.alert(json);\n        await axios.post(`http://${IP_AND_PORT}/api/post-request`,\n             json, {headers: {'Content-Type': 'application/json'}});\n    }\n}\n\nexport default TriggerMessage;","import Common from './_common';\n\nclass UnlockConnector extends Common {\n    requestName = \"UnlockConnector\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            evseId: {\n                description: \"This contains the identifier of the EVSE for which a connector needs to be unlocked.\",\n                type: \"integer\"\n            },\n            connectorId: {\n                description: \"This contains the identifier of the connector that needs to be unlocked.\",\n                type: \"integer\"\n            }\n        }\n    }\n}\n\nexport default UnlockConnector;","import Common from './_common';\n\nclass UnpublishFirmware extends Common {\n    requestName = \"UnpublishFirmware\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            checksum: {\n                description: \"The MD5 checksum over the entire firmware file as a hexadecimal string of length 32.\",\n                type: \"string\",\n                maxLength: 32\n            }\n        },\n        required: [\"checksum\"]\n    }\n}\n\nexport default UnpublishFirmware;","import Common from './_common';\nimport axios from \"axios\";\nimport {IP_AND_PORT} from \"../../config\";\n\nclass UpdateFirmware extends Common {\n    requestName = \"UpdateFirmware\";\n    schema = {\n        definitions: {\n            CustomDataType: {\n                description: \"This class can be extended with arbitrary JSON properties to allow adding custom data.\",\n                type: \"object\",\n                properties: {\n                    jsonString: {\n                        title: \"JSON String\",\n                        description: \"If this field is not changed, the whole customData property will be removed\",\n                        type: \"string\",\n                        default: \"{\\\"vendorId\\\": \\\"\\\"}\",\n                        maxLength: 10000\n                    }\n                }\n            },\n            FirmwareType: {\n                description: \"Represents a copy of the firmware that can be loaded/updated on the Charging Station.\",\n                type: \"object\",\n                properties: {\n                    customData: {\n                        $ref: \"#/definitions/CustomDataType\"\n                    },\n                    location: {\n                        description: \"URI defining the origin of the firmware.\",\n                        type: \"string\",\n                        maxLength: 512\n                    },\n                    retrieveDateTime: {\n                        description: \"Date and time at which the firmware shall be retrieved.\",\n                        type: \"string\",\n                        format: \"date-time\"\n                    },\n                    installDateTime: {\n                        description: \"Date and time at which the firmware shall be installed.\",\n                        type: \"string\",\n                        format: \"date-time\"\n                    },\n                    signingCertificate: {\n                        description: \"Certificate with which the firmware was signed. PEM encoded X.509 certificate.\",\n                        type: \"string\",\n                        maxLength: 5500\n                    },\n                    signature: {\n                        description: \"Base64 encoded firmware signature.\",\n                        type: \"string\",\n                        maxLength: 800\n                    }\n                },\n                required: [\"location\", \"retrieveDateTime\"]\n            }\n        },\n        type: \"object\",\n        properties: {\n            customData: {\n                $ref: \"#/definitions/CustomDataType\"\n            },\n            retries: {\n                description: \"This specifies how many times Charging Station must try to download the firmware \" +\n                    \"before giving up. If this field is not present, it is left to Charging Station to decide how \" +\n                    \"many times it wants to retry.\",\n                type: \"integer\"\n            },\n            retryInterval: {\n                description: \"The interval in seconds after which a retry may be attempted. If this field is not \" +\n                    \"present, it is left to Charging Station to decide how long to wait between attempts.\",\n                type: \"integer\"\n            },\n            requestId: {\n                description: \"The Id of this request\",\n                type: \"integer\"\n            },\n            firmware: {\n                $ref: \"#/definitions/FirmwareType\"\n            }\n        },\n        required: [\"requestId\", \"firmware\"]\n    }\n\n    validate = (formData, errors) => {\n        let json = null;\n        if (formData.customData.jsonString.length > 0) {\n            try {\n                json = JSON.parse(formData.customData.jsonString);\n                if(!json.hasOwnProperty(\"vendorId\")){\n                    errors.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                }\n            } catch {\n                errors.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n            }\n        }\n        if (formData.firmware.customData.jsonString.length > 0) {\n            try {\n                json = JSON.parse(formData.firmware.customData.jsonString);\n                if(!json.hasOwnProperty(\"vendorId\")){\n                    errors.firmware.customData.jsonString.addError(\"JSON string should have \\\"vendorId\\\" property\");\n                }\n            } catch {\n                errors.firmware.customData.jsonString.addError(\"cannot parse this field into JSON string\");\n            }\n        }\n        return errors;\n    }\n\n    onSubmit = async ({formData}) => {\n        formData = this.formatCustomData(formData);\n        formData.firmware = this.formatCustomData(formData.firmware);\n        const json = this.formatData(formData);\n        window.alert(json);\n        await axios.post(`http://${IP_AND_PORT}/api/post-request`,\n             json, {headers: {'Content-Type': 'application/json'}});\n    }\n}\n\nexport default UpdateFirmware;","import React, {Component} from 'react';\nimport PropTypes from \"prop-types\";\nimport axios from 'axios';\nimport {Accordion, Alert, Form} from \"react-bootstrap\";\nimport {IP_AND_PORT} from \"../config\";\nimport CancelReservation from \"./Forms/cancelReservation\"\nimport CertificateSigned from \"./Forms/certificateSigned\"\nimport ChangeAvailability from \"./Forms/changeAvailability\"\nimport ClearCache from \"./Forms/clearCache\";\nimport ClearChargingProfile from \"./Forms/clearChargingProfile\";\nimport ClearDisplayMessage from \"./Forms/clearDisplayMessage\";\nimport ClearVariableMonitoring from \"./Forms/clearVariableMonioring\";\nimport CostUpdated from \"./Forms/costUpdated\";\nimport CustomerInformation from \"./Forms/customerInformation\";\nimport DataTransfer from \"./Forms/dataTransfer\";\nimport DeleteCertificate from \"./Forms/deleteCertificate\";\nimport GetBaseReport from \"./Forms/getBaseReport\";\nimport GetChargingProfiles from \"./Forms/getChargingProfiles\";\nimport GetCompositeSchedule from \"./Forms/getCompositeSchedule\";\nimport GetDisplayMessages from \"./Forms/getDisplayMessages\";\nimport GetInstalledCertificateIds from \"./Forms/getInstalledCertificateIds\";\nimport GetLocalListVersion from \"./Forms/getLocalListVersion\";\nimport GetLog from \"./Forms/getLog\";\nimport GetMonitoringReport from \"./Forms/getMonitoringReport\";\nimport GetReport from \"./Forms/getReport\";\nimport GetTransactionStatus from \"./Forms/getTransactionStatus\";\nimport GetVariables from \"./Forms/getVariables\";\nimport InstallCertificate from \"./Forms/installCertificate\";\nimport PublishFirmware from \"./Forms/publishFirmware\";\nimport ReserveNow from \"./Forms/reserveNow\";\nimport Reset from \"./Forms/reset\";\nimport SendLocalList from \"./Forms/sendLocalList\";\nimport SetChargingProfile from \"./Forms/setChargingProfile\";\nimport SetDisplayMessage from \"./Forms/setDisplayMessage\";\nimport SetMonitoringBase from \"./Forms/setMonitoringBase\";\nimport SetMonitoringLevel from \"./Forms/setMonitoringLevel\";\nimport SetNetworkProfile from \"./Forms/setNetworkProfile\";\nimport SetVariableMonitoring from \"./Forms/setVariableMonitoring\";\nimport SetVariables from \"./Forms/setVariables\";\nimport SignCertificate from \"./Forms/signCertificate\";\nimport TriggerMessage from \"./Forms/triggerMessage\";\nimport UnlockConnector from \"./Forms/unlockConnector\";\nimport UnpublishFirmware from \"./Forms/unpublishFirmware\";\nimport UpdateFirmware from \"./Forms/updateFirmware\";\n\nexport class MainForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            chargers: [],\n            charger: \"\",\n            isLoaded: false,\n            error: null,\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        axios.get(`http://${IP_AND_PORT}/api/get-chargers`).then(res => {\n                this.setState({\n                    isLoaded: true,\n                    chargers: res.data,\n                    charger: res.data.length > 1 ? res.data[0] : \"\"\n                });\n            },\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                })\n    }\n\n    handleChange(event) {\n            this.setState({charger: event.target.value})\n    }\n\n    render() {\n        const { chargers, isLoaded, error } = this.state;\n        if (error) {\n            return <Alert variant=\"danger\">{error.message}</Alert>;\n        } else if (!isLoaded) {\n            return <Alert variant=\"info\">Loading...</Alert>;\n        } else {\n            return (\n                <>\n                    <Form>\n                        <Form.Group controlId={\"formSelectCharger\"}>\n                            <Form.Label style={{color: \"white\"}}>Select charger:&nbsp;</Form.Label>\n                            <Form.Control as={\"select\"} onChange={this.handleChange} >\n                                {chargers.map((charger) => <option value={charger} key={charger}>{charger}</option>)}\n                            </Form.Control>\n                        </Form.Group>\n                    </Form>\n                    <h5 style={{color: \"white\"}}>Select request:</h5>\n                    <Accordion>\n                        <CancelReservation charger={ this.state.charger } title=\"Cancel reservation request\" eventKey=\"0\" uid={this.props.uid}/>\n                        <CertificateSigned charger={this.state.charger} title=\"Certificate signed\" eventKey=\"1\" uid={this.props.uid}/>\n                        <ChangeAvailability charger={this.state.charger} title=\"Change availability\" eventKey=\"2\" uid={this.props.uid}/>\n                        <ClearCache charger={this.state.charger} title=\"Clear cache\" eventKey=\"3\" uid={this.props.uid}/>\n                        <ClearChargingProfile charger={this.state.charger} title=\"Clear charging profile\" eventKey=\"4\" uid={this.props.uid}/>\n                        <ClearDisplayMessage charger={this.state.charger} title=\"Clear display message\" eventKey=\"5\" uid={this.props.uid}/>\n                        <ClearVariableMonitoring charger={this.state.charger} title=\"Clear variable monitoring\" eventKey=\"6\"  uid={this.props.uid}/>\n                        <CostUpdated charger={this.state.charger} title=\"Cost updated\" eventKey=\"7\" uid={this.props.uid}/>\n                        <CustomerInformation charger={this.state.charger} title=\"Customer information\" eventKey=\"8\" uid={this.props.uid}/>\n                        <DataTransfer charger={this.state.charger} title=\"Data transfer\" eventKey=\"9\" uid={this.props.uid}/>\n                        <DeleteCertificate charger={this.state.charger} title=\"Delete certificate\" eventKey=\"10\" uid={this.props.uid}/>\n                        <GetBaseReport charger={this.state.charger} title=\"Get base report\" eventKey=\"11\" uid={this.props.uid}/>\n                        <GetChargingProfiles charger={this.state.charger} title=\"Get charging profiles\" eventKey=\"12\" uid={this.props.uid}/>\n                        <GetCompositeSchedule charger={this.state.charger} title=\"Get composite schedule\" eventKey=\"13\" uid={this.props.uid}/>\n                        <GetDisplayMessages charger={this.state.charger} title=\"Get display messages\" eventKey=\"14\" uid={this.props.uid}/>\n                        <GetInstalledCertificateIds charger={this.state.charger} title=\"Get installed certificate Id's\" eventKey=\"15\" uid={this.props.uid}/>\n                        <GetLocalListVersion charger={this.state.charger} title=\"Get local list version\" eventKey=\"16\" uid={this.props.uid}/>\n                        <GetLog charger={this.state.charger} title=\"Get log\" eventKey=\"17\" uid={this.props.uid}/>\n                        <GetMonitoringReport charger={this.state.charger} title=\"Get monitoring report\" eventKey=\"18\" uid={this.props.uid}/>\n                        <GetReport charger={this.state.charger} title=\"Get report\" eventKey=\"19\" uid={this.props.uid}/>\n                        <GetTransactionStatus charger={this.state.charger} title=\"Get transaction status\" eventKey=\"20\" uid={this.props.uid}/>\n                        <GetVariables charger={this.state.charger} title=\"Get variables\" eventKey=\"21\" uid={this.props.uid}/>\n                        <InstallCertificate charger={this.state.charger} title=\"Install certificate\" eventKey=\"22\" uid={this.props.uid}/>\n                        <PublishFirmware charger={this.state.charger} title=\"Publish firmware\" eventKey=\"23\" uid={this.props.uid}/>\n                        <ReserveNow charger={this.state.charger} title=\"Reserve now\" eventKey=\"24\" uid={this.props.uid}/>\n                        <Reset charger={this.state.charger} title=\"Reset\" eventKey=\"25\" uid={this.props.uid}/>\n                        <SendLocalList charger={this.state.charger} title=\"Send local list\" eventKey=\"26\" uid={this.props.uid}/>\n                        <SetChargingProfile charger={this.state.charger} title=\"Set charging profile\" eventKey=\"27\" uid={this.props.uid}/>\n                        <SetDisplayMessage charger={this.state.charger} title=\"Set display message\" eventKey=\"28\" uid={this.props.uid}/>\n                        <SetMonitoringBase charger={this.state.charger} title=\"Set monitoring base\" eventKey=\"29\" uid={this.props.uid}/>\n                        <SetMonitoringLevel charger={this.state.charger} title=\"Set monitoring level\" eventKey=\"30\" uid={this.props.uid}/>\n                        <SetNetworkProfile charger={this.state.charger} title=\"Set network profile\" eventKey=\"31\" uid={this.props.uid}/>\n                        <SetVariableMonitoring charger={this.state.charger} title=\"Set variable monitoring\" eventKey=\"32\" uid={this.props.uid}/>\n                        <SetVariables charger={this.state.charger} title=\"Set variables\" eventKey=\"33\" uid={this.props.uid}/>\n                        <SignCertificate charger={this.state.charger} title=\"Sign certificate\" eventKey=\"34\" uid={this.props.uid}/>\n                        <TriggerMessage charger={this.state.charger} title=\"Trigger Message\" eventKey=\"35\" uid={this.props.uid}/>\n                        <UnlockConnector charger={this.state.charger} title=\"Unlock connector\" eventKey=\"36\" uid={this.props.uid}/>\n                        <UnpublishFirmware charger={this.state.charger} title=\"Unpublish firmware\" eventKey=\"37\" uid={this.props.uid}/>\n                        <UpdateFirmware charger={this.state.charger} title=\"Update firmware\" eventKey=\"38\" uid={this.props.uid}/>\n                    </Accordion>\n                </>\n\n            );\n        }\n\n    }\n}\n\nMainForm.propTypes = {\n    uid: PropTypes.string.isRequired\n}\n\nexport default MainForm;","import 'bootstrap/dist/css/bootstrap.min.css'\nimport React, {useEffect, useState} from \"react\";\nimport {Col, Container, Navbar, Row} from \"react-bootstrap\";\nimport { LazyLog } from 'react-lazylog';\nimport {IP_AND_PORT} from \"./config\";\nimport { useCookies } from \"react-cookie\";\nimport { v4 as uuidv4 } from 'uuid';\nimport MainForm from \"./components/MainForm\"\n\nfunction App() {\n    const [cookies, setCookie] = useCookies([\"ocppWebClientId\"])\n    const size = useWindowSize();\n    let socket = null;\n    let uid;\n\n    function handleUidChange() {\n        if(!cookies.ocppWebClientId){\n            setCookie('ocppWebClientId', uuidv4(), { path: '/' })\n        }\n        return cookies.ocppWebClientId;\n    }\n\n    uid = handleUidChange();\n\n    return (\n        <div className=\"App bg-dark\" style={{height: size.height}}>\n            <Container fluid>\n                <Navbar bg=\"dark\" expand=\"lg\" className='navbar-dark'>\n                    <Navbar.Brand href=\"#\" style={{color: \"orange\"}}>Ocpp Server web client (protocol version: 2.0.1)</Navbar.Brand>\n                </Navbar>\n            </Container>\n            <Container fluid>\n                <Row>\n                    <Col lg='5' style={{overflowY: \"auto\", height: size.height - 56}}>\n                        <MainForm uid={uid}/>\n                    </Col>\n                    <Col>\n                        <LazyLog height={size.height - 56}\n                                 enableSearch url={`ws://${IP_AND_PORT}/api/webclient-socket/` + uid}\n                                 websocket={true} websocketOptions={{\n                            onOpen: (e, sock) => {\n                                socket = sock;\n                                cookies.ocppWebClientId && sock.send(JSON.stringify({message: \"connect\"}));\n                            },\n                            onClose: () => {\n                                cookies.ocppWebClientId && socket && socket.send(JSON.stringify({message: \"disconnect\"}));\n                            },\n                            formatMessage: e => JSON.parse(e).message,\n                        }} />\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n}\n\n// Hook\nfunction useWindowSize() {\n    // Initialize state with undefined width/height so server and client renders match\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n    const [windowSize, setWindowSize] = useState({\n        width: 1024,\n        height: 768,\n    });\n\n    useEffect(() => {\n        // Handler to call on window resize\n        function handleResize() {\n            // Set window width/height to state\n            setWindowSize({width: window.innerWidth, height: window.innerHeight});\n        }\n\n        // Add event listener\n        window.addEventListener(\"resize\", handleResize);\n\n        // Call handler right away so state gets updated with initial window size\n        handleResize();\n\n        // Remove event listener on cleanup\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, []); // Empty array ensures that effect is only run on mount\n\n    return windowSize;\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { CookiesProvider } from 'react-cookie';\n\nReactDOM.render(\n  <CookiesProvider>\n          <App />\n  </CookiesProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}